From: "Saved by Windows Internet Explorer 8"
Subject: FAQ - UTF-8, UTF-16, UTF-32 & BOM
Date: Thu, 30 Dec 2010 12:59:10 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CBA821.59AE3F90"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7600.16543

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01CBA821.59AE3F90
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://unicode.org/faq/utf_bom.html

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML><HEAD><TITLE>FAQ - UTF-8, UTF-16, UTF-32 & BOM</TITLE>
<META content=3D"text/html; charset=3Dutf-8" http-equiv=3DContent-Type>
<META content=3Den-us http-equiv=3DContent-Language>
<META name=3DVI60_defaultClientScript content=3DJavaScript>
<META name=3DGENERATOR content=3D"MSHTML 8.00.7600.16700">
<META name=3Dkeywords content=3D"utf, bom">
<META name=3DProgId content=3DFrontPage.Editor.Document><LINK =
rel=3Dstylesheet=20
type=3Dtext/css =
href=3D"http://www.unicode.org/webscripts/standard_styles.css"><LINK=20
rel=3Dstylesheet type=3Dtext/css =
href=3D"http://unicode.org/faq/faq_styles.css">
<STYLE type=3Dtext/css></STYLE>
</HEAD>
<BODY text=3D#330000>
<TABLE border=3D0 cellSpacing=3D0 cellPadding=3D0 width=3D"100%">
  <TBODY>
  <TR>
    <TD colSpan=3D2>
      <TABLE border=3D0 cellSpacing=3D0 cellPadding=3D0 width=3D"100%">
        <TBODY>
        <TR><!-- new style header, which lines up left and right -->
          <TD style=3D"WIDTH: 38px; HEIGHT: 35px" class=3Dicon><A=20
            href=3D"http://www.unicode.org/"><IMG border=3D0 =
alt=3D[Unicode]=20
            align=3Dmiddle =
src=3D"http://www.unicode.org/webscripts/logo60s2.gif"=20
            width=3D34 height=3D33></A></TD>
          <TD style=3D"VERTICAL-ALIGN: middle" class=3Dicon><!-- old =
style header, with misaligned items left/right =0A=
        <td class=3D"icon"><a href=3D"http://www.unicode.org/"><img =
border=3D"0"=0A=
        src=3D"http://www.unicode.org/webscripts/logo60s2.gif" =
align=3D"middle"=0A=
        alt=3D"[Unicode]" width=3D"34" height=3D"33"></a>=0A=
        &nbsp; -->&nbsp;<A=20
            class=3Dbar =
href=3D"http://www.unicode.org/unicode/faq/"><FONT=20
            size=3D3>Frequently Asked Questions</FONT></A></TD>
          <TD class=3Dbar><A class=3Dbar =
href=3D"http://www.unicode.org/">Home</A> |=20
            <A class=3Dbar href=3D"http://www.unicode.org/sitemap/">Site =
Map</A> |=20
            <A class=3Dbar =
href=3D"http://www.unicode.org/search/">Search=20
        </A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><!-- =
BEGIN CONTENTS -->
<TABLE>
  <TBODY>
  <TR>
    <TD class=3Dcontents vAlign=3Dtop>
      <BLOCKQUOTE>
        <H1>UTF-8, UTF-16, UTF-32 &amp; BOM</H1>
        <DIV style=3D"MAX-WIDTH: 33%" class=3Dfaqtoc>
        <H2><A =
href=3D"http://unicode.org/faq/utf_bom.html#General">General=20
        questions, relating to UTF or Encoding Forms</A></H2>
        <UL class=3Dfaq>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#gen0">Is =
Unicode a=20
          16-bit encoding?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#gen1">Can =
Unicode=20
          text be represented in more than one way?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#gen2">What =
is a=20
          UTF?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#gen3">Where =
can I get=20
          more information on encoding forms?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#gen4">How =
do I write=20
          a UTF converter?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#gen5">Which =
of the=20
          UTFs do I need to support?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#gen6">What =
are some=20
          of the differences between the UTFs?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#gen7">Why =
do some=20
          UTFs have a BE or LE in their label, as in UTF-16LE?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#gen8">Are =
there any=20
          byte sequences that are not generated by a UTF? How should I =
interpret=20
          them?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#gen9">Is =
there a=20
          standard method to package a Unicode character so it fits an =
8-Bit=20
          ASCII stream?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#gen10">Which of these=20
          approaches is the best?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#gen11">Which of these=20
          formats is the most standard?</A></LI></UL>
        <H2><A href=3D"http://unicode.org/faq/utf_bom.html#UTF8">UTF-8=20
FAQ</A></H2>
        <UL class=3Dfaq>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf8-1">What is the=20
          definition of UTF-8?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#utf8-2">Is =
the UTF-8=20
          encoding scheme the same irrespective of whether the =
underlying=20
          processor is little endian or big endian?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#utf8-3">Is =
the UTF-8=20
          encoding scheme the same irrespective of whether the =
underlying system=20
          uses ASCII or EBCDIC encoding?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#utf8-4">How =
do I=20
          convert a UTF-16 surrogate pair such as &lt;D800 DC00&gt; to =
UTF-8? A=20
          one four byte sequence or as two separate 3-byte =
sequences?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#utf8-5">How =
do I=20
          convert an unpaired UTF-16 surrogate to UTF-8?</A> </LI></UL>
        <H2><A href=3D"http://unicode.org/faq/utf_bom.html#UTF16">UTF-16 =

        FAQ</A></H2>
        <UL class=3Dfaq>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf16-1">What is=20
          UTF-16?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf16-2">What are=20
          surrogates?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf16-3">What is the=20
          algorithm to convert from UTF-16 to character codes?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf16-4">Isn=E2=80=99t there =

          a simpler way to do this?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf16-5">Why are some=20
          people opposed to UTF-16?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf16-6">Will UTF-16=20
          ever be extended to more than a million characters?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf16-7">Are there=20
          any 16-bit values that are invalid?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf16-8">Are there=20
          any paired surrogates that are invalid?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf16-9">Since the=20
          surrogate pairs will be rare, does that mean I can dispense =
with=20
          them?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf16-10">When will=20
          most implementations of Unicode support =
surrogates?</A></LI></UL>
        <H2><A href=3D"http://unicode.org/faq/utf_bom.html#UTF32">UTF-32 =

        FAQ</A></H2>
        <UL class=3Dfaq>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf32-1">What is=20
          UTF-32?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf32-2">Should I use=20
          UTF-32 (or UCS-4) for storing Unicode strings in =
memory?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf32-3">How about=20
          using UTF-32 interfaces in my APIs?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf32-4">Doesn=E2=80=99t it=20
          cause a problem to have UTF-16 string APIs, instead of UTF-32 =
char=20
          APIs?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf32-5">Are there=20
          exceptions to the rule of exclusively using string parameters =
in=20
          APIs?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf32-6">How do I=20
          convert a UTF-16 surrogate pair such as &lt;D800 DC00&gt; to =
UTF-32?=20
          As one or as two 4-byte sequences?</A></LI>
          <LI><A =
href=3D"http://unicode.org/faq/utf_bom.html#utf32-7">How do I=20
          convert an unpaired UTF-16 surrogate to UTF-32?</A> </LI></UL>
        <H2><A href=3D"http://unicode.org/faq/utf_bom.html#BOM">Byte =
Order Mark=20
        (BOM) FAQ</A></H2>
        <UL class=3Dfaq>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#bom1">What =
is a=20
          BOM?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#bom2">Where =
is a BOM=20
          Useful?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#bom3">What =
does=20
          =E2=80=98endian=E2=80=99 mean?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#bom4">When =
a BOM is=20
          used, is it only in 16-bit Unicode text?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#bom5">Can a =
UTF-8=20
          data stream contain the BOM character (in UTF-8 form)? If yes, =
does it=20
          affect the byte order?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#bom6">What =
should I=20
          do with U+FEFF in the middle of a file?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#bom7">I am =
using a=20
          protocol that has BOM at the start of text. How do I represent =
an=20
          initial ZWNBSP?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#bom8">How =
do I tag=20
          data that does not interpret FEFF as a BOM?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#bom9">Why =
wouldn=E2=80=99t I=20
          always use a protocol that requires a BOM?</A></LI>
          <LI><A href=3D"http://unicode.org/faq/utf_bom.html#bom10">How =
I should=20
          deal with BOMs?</A></LI></UL></DIV>
        <H2><A name=3DGeneral></A>General questions, relating to UTF or =
Encoding=20
        Form</H2>
        <P class=3Dq><A name=3Dgen0></A>Q: Is Unicode a 16-bit =
encoding?</P>
        <P class=3Da>A: No. The first version of Unicode was a 16-bit =
encoding,=20
        from 1991 to 1995, but starting with Unicode 2.0 (July, 1996), =
it has=20
        not been a 16-bit encoding. The Unicode Standard encodes =
characters in=20
        the range U+0000..U+10FFFF, which is roughly a 21-bit code =
space.=20
        Depending on the encoding form you choose (UTF-8, UTF-16, or =
UTF-32),=20
        each character will then be represented either as a sequence of =
one to=20
        four 8-bit bytes, one or two 16-bit code units, or a single =
32-bit code=20
        unit.</P>
        <P class=3Dq><A name=3Dgen1></A>Q: Can Unicode text be =
represented in more=20
        than one way?</P>
        <P class=3Da>A: Yes, there are several possible representations =
of Unicode=20
        data, including UTF-8,&nbsp; UTF-16 and UTF-32. In addition, =
there are=20
        compression transformations such as the one described in the =
<I><A=20
        href=3D"http://www.unicode.org/reports/tr6/">Unicode Technical =
Standard=20
        #6: A Standard Compression Scheme for Unicode</A></I>.</P>
        <P class=3Dq><A name=3Dgen2></A>Q: What is a UTF?</P>
        <P class=3Da>A: A <I>Unicode transformation format</I> (UTF) is =
an=20
        algorithmic mapping from every Unicode code point (except <A=20
        href=3D"http://unicode.org/faq/utf_bom.html#34">surrogate code =
points</A>)=20
        to a unique byte sequence. The ISO/IEC 10646 standard uses the =
term =E2=80=9CUCS=20
        transformation format=E2=80=9D for UTF; the two terms are merely =
synonyms for=20
        the same concept. </P>
        <P class=3Da>Each UTF is reversible, thus every UTF supports =
<I>lossless=20
        round tripping</I>: mapping from any Unicode coded character =
sequence S=20
        to a sequence of bytes and back will produce S again. To ensure =
round=20
        tripping, a UTF mapping <I>must also</I> map all code points =
that are=20
        not valid Unicode characters to unique byte sequences. These =
invalid=20
        code points are the 66 <I>noncharacters</I> (including FFFE and =
FFFF),=20
        as well as unpaired surrogates.&nbsp;</P>
        <P class=3Da>The <A =
href=3D"http://www.unicode.org/reports/tr6/">SCSU</A>=20
        compression method, even though it is reversible, is not a UTF =
because=20
        the same string can map to very many different byte sequences, =
depending=20
        on the particular SCSU compressor. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dgen3></A>Q: Where can I get more =
information on=20
        encoding forms?</P>
        <P class=3Da>A: For the formal definition of UTFs see Section =
3.9, <A=20
        =
href=3D"http://www.unicode.org/versions/Unicode5.2.0/ch03.pdf#G7404">Unic=
ode=20
        Encoding Forms</A> in the Unicode Standard. For more information =
on=20
        encoding forms see <A=20
        href=3D"http://www.unicode.org/reports/tr17/">Unicode Technical =
Report UTR=20
        #17:<I> Unicode Character Encoding Model</I></A>. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dgen4></A>Q: How do I write a UTF =
converter?</P>
        <P class=3Da>A: The freely available open source project <A=20
        href=3D"http://site.icu-project.org/">International Components =
for=20
        Unicode</A> (ICU) has UTF conversion built into it. The latest =
version=20
        may be <A =
href=3D"http://site.icu-project.org/download">downloaded</A>=20
        from the ICU Project web site. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dgen8></A>Q: Are there any byte sequences =
that are not=20
        generated by a UTF? How should I interpret them?</P>
        <P class=3Da>A: None of the UTFs can generate <I>every</I> =
arbitrary byte=20
        sequence. For example, in UTF-8 every byte of the form=20
        110xxxxx<I><SUB>2</SUB></I> <I>must</I> be followed with a byte =
of the=20
        form 10xxxxxx<I><SUB>2</SUB></I>. A sequence such as=20
        &lt;110xxxxx<I><SUB>2</SUB></I> 0xxxxxxx<I><SUB>2</SUB></I>&gt; =
is=20
        illegal, and must never be generated. When faced with this =
illegal byte=20
        sequence while transforming or interpreting, a UTF-8 conformant =
process=20
        must treat the first byte 110xxxxx<I><SUB>2</SUB></I> as an =
illegal=20
        termination error: for example, either signaling an error, =
filtering the=20
        byte out, or representing the byte with a marker such as FFFD=20
        (REPLACEMENT CHARACTER). In the latter two cases, it will =
continue=20
        processing at the second byte 0xxxxxxx<I><SUB>2</SUB></I>.</P>
        <P class=3Da>A conformant process <I>must not</I> interpret =
illegal or=20
        ill-formed byte sequences as characters, however, it may take =
error=20
        recovery actions. No conformant process&nbsp; may use irregular =
byte=20
        sequences to encode out-of-band information.</P>
        <P class=3Dq><A name=3Dgen5></A>Q: Which of the UTFs do I need =
to=20
        support?</P>
        <P class=3Da>A: UTF-8 is most common on the web. UTF-16 is used =
by Java=20
        and Windows. UTF-32 is used by various Unix systems. The =
conversions=20
        between all of them are algorithmically based, fast and =
lossless. This=20
        makes it easy to support data input or output in multiple =
formats, while=20
        using a particular UTF for internal storage or processing.&nbsp; =
<A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dgen6></A>Q: What are some of the =
differences between=20
        the UTFs?</P>
        <P class=3Da>A: The following table summarizes some of the =
properties of=20
        each of the UTFs.&nbsp;</P>
        <DIV style=3D"FONT-SIZE: 80%">
        <TABLE class=3Dfaq>
          <TBODY>
          <TR>
            <TH>Name</TH>
            <TH>UTF-8</TH>
            <TH>UTF-16</TH>
            <TH>UTF-16BE</TH>
            <TH>UTF-16LE</TH>
            <TH>UTF-32</TH>
            <TH>UTF-32BE</TH>
            <TH>UTF-32LE</TH></TR>
          <TR>
            <TH>Smallest code point</TH>
            <TD align=3Dright>0000</TD>
            <TD align=3Dright>0000</TD>
            <TD align=3Dright>0000</TD>
            <TD align=3Dright>0000</TD>
            <TD align=3Dright>0000</TD>
            <TD align=3Dright>0000</TD>
            <TD align=3Dright>0000</TD></TR>
          <TR>
            <TH>Largest code point</TH>
            <TD align=3Dright>10FFFF</TD>
            <TD align=3Dright>10FFFF</TD>
            <TD align=3Dright>10FFFF</TD>
            <TD align=3Dright>10FFFF</TD>
            <TD align=3Dright>10FFFF</TD>
            <TD align=3Dright>10FFFF</TD>
            <TD align=3Dright>10FFFF</TD></TR>
          <TR>
            <TH>Code unit size</TH>
            <TD align=3Dmiddle>8 bits</TD>
            <TD align=3Dmiddle>16 bits</TD>
            <TD align=3Dmiddle>16 bits</TD>
            <TD align=3Dmiddle>16 bits</TD>
            <TD align=3Dmiddle>32 bits</TD>
            <TD align=3Dmiddle>32 bits</TD>
            <TD align=3Dmiddle>32 bits</TD></TR>
          <TR>
            <TH>Byte order</TH>
            <TD align=3Dmiddle>N/A</TD>
            <TD align=3Dmiddle>&lt;BOM&gt;</TD>
            <TD align=3Dmiddle>big-endian</TD>
            <TD align=3Dmiddle>little-endian</TD>
            <TD align=3Dmiddle>&lt;BOM&gt;</TD>
            <TD align=3Dmiddle>big-endian</TD>
            <TD align=3Dmiddle>little-endian</TD></TR>
          <TR>
            <TH>Fewest bytes per character</TH>
            <TD align=3Dmiddle>1</TD>
            <TD align=3Dmiddle>2</TD>
            <TD align=3Dmiddle>2</TD>
            <TD align=3Dmiddle>2</TD>
            <TD align=3Dmiddle>4</TD>
            <TD align=3Dmiddle>4</TD>
            <TD align=3Dmiddle>4</TD></TR>
          <TR>
            <TH>Most bytes per character</TH>
            <TD align=3Dmiddle>4</TD>
            <TD align=3Dmiddle>4</TD>
            <TD align=3Dmiddle>4</TD>
            <TD align=3Dmiddle>4</TD>
            <TD align=3Dmiddle>4</TD>
            <TD align=3Dmiddle>4</TD>
            <TD align=3Dmiddle>4</TD></TR></TBODY></TABLE></DIV>
        <P class=3Da>In the table &lt;BOM&gt; indicates that the byte =
order is=20
        determined by a byte order mark, if present at the beginning of =
the data=20
        stream, otherwise it is big-endian.&nbsp;<A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dgen7></A>Q: Why do some of the UTFs have =
a BE or LE=20
        in their label, such as UTF-16LE?</P>
        <P class=3Da>A: UTF-16 and UTF-32 use code units that are two =
and four=20
        bytes long respectively. For these UTFs, there are three =
sub-flavors:=20
        BE, LE and unmarked. The BE form uses big-endian byte =
serialization=20
        (most significant byte first), the LE form uses little-endian =
byte=20
        serialization (least significant byte first) and the unmarked =
form uses=20
        big-endian byte serialization by default, but may include a byte =
order=20
        mark at the beginning to indicate the actual byte serialization =
used. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A> =
</P>
        <P class=3Dq><A name=3Dgen9></A>Q: Is there a standard method to =
package a=20
        Unicode character so it fits an 8-Bit ASCII stream?</P>
        <P class=3Da>A: There are three or four options for making =
Unicode fit=20
        into an 8-bit format.</P>
        <P class=3Da>a) Use UTF-8. This preserves ASCII, but not =
Latin-1, because=20
        the characters &gt;127 are different from Latin-1. UTF-8 uses =
the bytes=20
        in the ASCII only for ASCII characters. Therefore, it works well =
in any=20
        environment where ASCII characters have a significance as syntax =

        characters, e.g. file name syntaxes, markup languages, etc., but =
where=20
        the all other characters may use arbitrary bytes. =
<BR><U>Example</U>:=20
        =E2=80=9CLatin Small Letter s with Acute=E2=80=9D (015B) would =
be encoded as two bytes:=20
        C5 9B.</P>
        <P class=3Da>b) Use Java or C style escapes, of the form \uXXXXX =
or=20
        \xXXXXX. This format is not standard for text files, but well =
defined in=20
        the framework of the languages in question, primarily for source =

        files.<BR><U>Example</U>: The Polish word =
=E2=80=9Cwyj=C5=9Bcie=E2=80=9D with character=20
        =E2=80=9CLatin Small Letter s with Acute=E2=80=9D (015B) in the =
middle (=C5=9B is one=20
        character) would look like: =E2=80=9Cwyj\u015Bcie".</P>
        <P class=3Da>c) Use the <CODE>&amp;#xXXXX;</CODE> or=20
        <CODE>&amp;#DDDDD;</CODE> numeric character escapes as in HTML =
or XML.=20
        Again, these are not standard for plain text files, but well =
defined=20
        within the framework of these markup =
languages.<BR><U>Example</U>:=20
        =E2=80=9Cwyj=C5=9Bcie=E2=80=9D would look like =
=E2=80=9C<CODE>wyj&amp;#x015B;cie</CODE>"</P>
        <P class=3Da>d) Use <A=20
        href=3D"http://www.unicode.org/reports/tr6/">SCSU</A>. This =
format=20
        compresses Unicode into 8-bit format, preserving most of ASCII, =
but=20
        using some of the control codes as commands for the decoder. =
However,=20
        while ASCII text will look like ASCII text after being encoded =
in SCSU,=20
        other characters may occasionally be encoded with the same byte =
values,=20
        making SCSU unsuitable for 8-bit channels that blindly interpret =
any of=20
        the bytes as ASCII characters.<BR><U>Example</U>: =
=E2=80=9C&lt;SC2&gt; wyj=C3=9Bcie=E2=80=9D=20
        where &lt;SC2&gt; indicates the byte 0x12 and =
=E2=80=9C=C3=9B=E2=80=9D corresponds to byte=20
        0xDB. <A =
href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dgen10></A>Q: Which of these approaches is =
the=20
        best?</P>
        <P class=3Da>A: That depends on the circumstances: Of these four =

        approaches, d) uses the least space, but cannot be used=20
        <I>transparently</I> in most 8-bit environments. a) is the most =
widely=20
        supported in plain text files and b) and c) use the most space, =
but are=20
        widely supported for program source files in Java and C, or=20
        <I>within</I> HTML and XML files respectively.&nbsp; <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dgen11></A>Q: Which of these formats is =
the most=20
        standard? </P>
        <P class=3Da>A: All four require that the receiver can =
understand that=20
        format, but a) is considered one of the three equivalent Unicode =

        Encoding Forms and therefore standard. The use of b), or c) out =
of their=20
        given context would definitely be considered non-standard, but =
could be=20
        a good solution for internal data transmission. The use of SCSU =
is=20
        itself a standard (for compressed data streams) but few general =
purpose=20
        receivers support SCSU, so it is again most useful in internal =
data=20
        transmission. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <H2><A name=3DUTF8></A>UTF-8 FAQ</H2>
        <P class=3Dq><A name=3Dutf8-1></A>Q: What is the definition of =
UTF-8?</P>
        <P class=3Da>A: UTF-8 is the byte-oriented encoding form of =
Unicode. For=20
        details of its definition, see Section 2.5 =E2=80=9C<A=20
        =
href=3D"http://www.unicode.org/versions/Unicode5.2.0/ch02.pdf#G13708">Enc=
oding=20
        Forms</A>=E2=80=9D and Section 3.9 =E2=80=9C<A=20
        =
href=3D"http://www.unicode.org/versions/Unicode5.2.0/ch03.pdf#G7404">=20
        Unicode Encoding Forms</A> =E2=80=9D in the <A=20
        href=3D"http://www.unicode.org/versions/Unicode5.2.0/">Unicode=20
        Standard</A>. See, in particular, Table 3-6 <I>UTF-8 Bit=20
        Distribution</I> and Table 3-7 <I>Well-formed UTF-8 Byte =
Sequences</I>,=20
        which give succinct summaries of the encoding form. Make sure =
you refer=20
        to the latest version of the Unicode Standard, as the <A=20
        href=3D"http://www.unicode.org/consortium/utc.html">Unicode =
Technical=20
        Committee</A> has tightened the definition of UTF-8 over time to =
more=20
        strictly enforce unique sequences and to prohibit encoding of =
certain=20
        invalid characters. There is an Internet <A=20
        href=3D"http://www.ietf.org/rfc/rfc3629.txt">RFC 3629</A> about =
UTF-8.=20
        UTF-8 is also defined in Annex D of ISO/IEC 10646. See also the =
question=20
        above, <A href=3D"http://unicode.org/faq/utf_bom.html#gen4">How =
do I write=20
        a UTF converter?</A></P>
        <P class=3Dq><A name=3Dutf8-2></A>Q: Is the UTF-8 encoding =
scheme the same=20
        irrespective of whether the underlying processor is little =
endian or big=20
        endian?</P>
        <P class=3Da>A: Yes. Since UTF-8 is interpreted as a sequence of =
bytes,=20
        there is no endian problem as there is for encoding forms that =
use=20
        16-bit or 32-bit code units. Where a BOM is used with UTF-8, it =
is=20
        <I>only</I> used as an ecoding signature to distinguish UTF-8 =
from other=20
        encodings =E2=80=94 it has nothing to do with byte order.&nbsp; =
<A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dutf8-3></A>Q: Is the UTF-8 encoding =
scheme the same=20
        irrespective of whether the underlying system uses ASCII or =
EBCDIC=20
        encoding?</P>
        <P class=3Da>A: There is only one definition of UTF-8. It is the =
precisely=20
        the same, whether the data were converted from ASCII or EBCDIC =
based=20
        character sets. However, byte sequences from standard UTF-8 =
won=E2=80=99t=20
        interoperate well in an EBCDIC system, because of the different=20
        arrangements of control codes between ASCII and EBCDIC. <A=20
        href=3D"http://www.unicode.org/reports/tr16/">Unicode Technical =
Report=20
        #16: <I>UTF-EBCDIC</I></A> defines is a specialized UTF&nbsp; =
that will=20
        interoperate in EBCDIC systems. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dutf8-4></A>Q: How do I convert a UTF-16 =
surrogate=20
        pair such as &lt;D800 DC00&gt; to UTF-8? A one four byte =
sequence or as=20
        two separate 3-byte sequences?</P>
        <P class=3Da>A: The definition of UTF-8 requires that =
supplementary=20
        characters (those using surrogate pairs in UTF-16) be encoded =
with a=20
        single four byte sequence. However, there is a widespread =
practice of=20
        generating pairs of three byte sequences in older software, =
especially=20
        software which pre-dates the introduction of UTF-16 or that is=20
        interoperating with UTF-16 environments under particular =
constraints.=20
        Such an encoding is <I>not conformant</I> to UTF-8 as defined. =
See <A=20
        href=3D"http://www.unicode.org/reports/tr26/">UTR #26: =
Compatability=20
        Encoding Scheme for UTF-16: 8-bit (CESU)</A> for a formal =
description of=20
        such a non-UTF-8 data format. When using CESU-8, great care must =
be=20
        taken that data is not accidentally treated as if it was UTF-8, =
due to=20
        the similarity of the formats. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dutf8-5></A>Q: How do I convert an =
unpaired UTF-16=20
        surrogate to UTF-8? </P>
        <P class=3Da>A different issue arises if an <I>unpaired</I> =
surrogate is=20
        encountered when converting ill-formed UTF-16 data. By =
represented such=20
        an unpaired surrogate on its own as a 3-byte sequence, the =
resulting=20
        UTF-8 data stream would become ill-formed. While it faithfully =
reflects=20
        the nature of the input, Unicode conformance requires that =
encoding form=20
        conversion always results in valid data stream. Therefore a =
converter<I>=20
        must</I> treat this as an error. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <H2><A name=3DUTF16></A>UTF-16 FAQ</H2>
        <P class=3Dq><A name=3Dutf16-1></A>Q: What is UTF-16?</P>
        <P class=3Da>A: UTF-16 uses a single 16-bitcode unit to encode =
the most=20
        common 63K characters, and a pair of 16-bit code units, called=20
        surrogates, to encode the 1M less commonly used characters in=20
        Unicode.</P>
        <P class=3Da>Originally, Unicode was designed as a pure 16-bit =
encoding,=20
        aimed at representing all modern scripts. (Ancient scripts were =
to be=20
        represented with private-use characters.) Over time, and =
especially=20
        after the addition of over 14,500 composite characters for =
compatibility=20
        with legacy sets, it became clear that 16-bits were not =
sufficient for=20
        the user community. Out of this arose UTF-16. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dutf16-2></A>Q: What are surrogates?</P>
        <P class=3Da>A: Surrogates are code points from two special =
ranges of=20
        Unicode values, reserved for use as the leading, and trailing =
values of=20
        paired code units in UTF-16. Leading, also called high, =
surrogates are=20
        from D800<SUB>16</SUB> to DBFF<SUB>16</SUB>, and trailing, or =
low,=20
        surrogates are from DC00<SUB>16</SUB> to DFFF<SUB>16</SUB>. They =
are=20
        called surrogates, since they do not represent characters =
directly, but=20
        only as a pair.</P>
        <P class=3Dq><A name=3Dutf16-3></A>Q: What=E2=80=99s the =
algorithm to convert from=20
        UTF-16 to character codes?</P>
        <P class=3Da>A: The Unicode Standard used to contain a short =
algorithm,=20
        now there is just a bit distribution table. Here are three short =
code=20
        snippets that translate the information from the bit =
distribution table=20
        into C code that will convert to and from UTF-16. </P>
        <P class=3Da>Using the following type definitions</P>
        <BLOCKQUOTE><PRE class=3Da>typedef unsigned int16 UTF16;
typedef unsigned int32 UTF32;</PRE></BLOCKQUOTE>
        <P class=3Da>the first snippet calculates the high (or leading) =
surrogate=20
        from a character code C.</P>
        <BLOCKQUOTE><PRE class=3Da>const UTF16 HI_SURROGATE_START =3D =
0xD800</PRE><PRE class=3Da>UTF16 X =3D (UTF16) C;
UTF32 U =3D (C &gt;&gt; 16) &amp; ((1 &lt;&lt; 5) - 1);
UTF16 W =3D (UTF16) U - 1;
UTF16 HiSurrogate =3D HI_SURROGATE_START | (W &lt;&lt; 6) | X &gt;&gt; =
10;
</PRE></BLOCKQUOTE>
        <P class=3Da>where X, U and W correspond to the labels used in =
Table 3-4=20
        <I>UTF-16 Bit Distribution</I>. The next snippet does the same =
for the=20
        low surrogate.</P>
        <BLOCKQUOTE><PRE class=3Da>const UTF16 LO_SURROGATE_START =3D =
0xDC00</PRE><PRE class=3Da>UTF16 X =3D (UTF16) C;
UTF16 LoSurrogate =3D (UTF16) (LO_SURROGATE_START | X &amp; ((1 &lt;&lt; =
10) - 1));</PRE></BLOCKQUOTE>
        <P class=3Da>Finally, the reverse, where hi and lo are the high =
and low=20
        surrogate, and C the resulting character</P>
        <BLOCKQUOTE><PRE class=3Da>UTF32 X =3D (hi &amp; ((1 &lt;&lt; 6) =
-1)) &lt;&lt; 10 | lo &amp; ((1 &lt;&lt; 10) -1);
UTF32 W =3D (hi &gt;&gt; 6) &amp; ((1 &lt;&lt; 5) - 1);
UTF32 U =3D W + 1;</PRE><PRE class=3Da>UTF32 C =3D U &lt;&lt; 16 | =
X;</PRE></BLOCKQUOTE>
        <P class=3Da>A caller would need to ensure that C, hi, and lo =
are in the=20
        appropriate ranges. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A> =
</P>
        <P class=3Dq><A name=3Dutf16-4></A>Q: Isn=E2=80=99t there a =
simpler way to do=20
        this?</P>
        <P class=3Da>A: There is a much simpler computation that does =
not try to=20
        follow the bit distribution table.</P>
        <BLOCKQUOTE><PRE class=3Da>// constants
const UTF32 LEAD_OFFSET =3D 0xD800 - (0x10000 &gt;&gt; 10);
const UTF32 SURROGATE_OFFSET =3D 0x10000 - (0xD800 &lt;&lt; 10) - =
0xDC00;

// computations
UTF16 lead =3D LEAD_OFFSET + (codepoint &gt;&gt; 10);
UTF16 trail =3D 0xDC00 + (codepoint &amp; 0x3FF);

UTF32 codepoint =3D (lead &lt;&lt; 10) + trail + =
SURROGATE_OFFSET;</PRE></BLOCKQUOTE>
        <P class=3Da><A=20
        href=3D"http://unicode.org/faq/attribution.html#MD">[MD]</A></P>
        <P class=3Dq><A name=3Dutf16-5></A>Q: Why are some people =
opposed to=20
        UTF-16?</P>
        <P class=3Da>A: People familiar with variable width East Asian =
character=20
        sets such as Shift-JIS ( SJIS) are understandably nervous about =
UTF-16,=20
        which sometimes requires two code units to represent a single =
character.=20
        They are well acquainted with the problems that variable-width =
codes=20
        have caused. However, there are some important differences =
between the=20
        mechanisms used in SJIS and UTF-16: </P>
        <P class=3Da>Overlap: </P>
        <UL>
          <LI>
          <P class=3Da>In SJIS, there is overlap between the leading and =
trailing=20
          code unit values, and between the trailing and single code =
unit=20
          values. This causes a number of problems:=20
          <UL>
            <LI>
            <P class=3Da>It causes false matches. For example, searching =
for an=20
            =E2=80=9Ca=E2=80=9D may match against the trailing code unit =
of a Japanese=20
            character. </P></LI>
            <LI>
            <P class=3Da>It prevents efficient random access. To know =
whether you=20
            are on a character boundary, you have to search backwards to =
find a=20
            known boundary. </P></LI>
            <LI>
            <P class=3Da>It makes the text extremely fragile. If a unit =
is dropped=20
            from a leading-trailing code unit pair, many following =
characters=20
            can be corrupted.</P></LI></UL></LI>
          <LI>
          <P class=3Da>In UTF-16, the code point ranges for high and low =

          surrogates, as well as for single units are all completely =
disjoint.=20
          None of these problems occur:
          <UL>
            <LI>
            <P class=3Da>There are no false matches.</P></LI>
            <LI>
            <P class=3Da>The location of the character boundary can be =
directly=20
            determined from each code unit value.</P></LI>
            <LI>
            <P class=3Da>A dropped surrogate will corrupt only a single=20
            character.</P></LI></UL></LI></UL>
        <P class=3Da>Frequency: </P>
        <UL>
          <LI>
          <P class=3Da>The vast majority of SJIS characters require 2 =
units, but=20
          characters using single units occur commonly and often have =
special=20
          importance, for example in file names.</P></LI>
          <LI>
          <P class=3Da>With UTF-16, relatively few characters require 2 =
units. The=20
          vast majority of characters in common use are single code =
units. Even=20
          in East Asian text, the incidence of surrogate pairs should be =
well=20
          less than 1% of all text storage on average. (Certain =
documents, of=20
          course, may have a higher incidence of surrogate pairs, just =
as=20
          <I>phthisique</I> is an fairly infrequent word in English, but =
may=20
          occur quite often in a particular scholarly text.) <A=20
          =
href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P></LI></UL=
>
        <P class=3Dq><A name=3Dutf16-6></A>Q: Will UTF-16 ever be =
extended to more=20
        than a million characters?</P>
        <P class=3Da>A: No. Both Unicode and ISO 10646 have policies in =
place that=20
        formally limit future code assignment to the integer range that =
can be=20
        expressed with current UTF-16 (0 to 1,114,111). Even if other =
encoding=20
        forms (i.e. other UTFs) can represent larger intergers, these =
policies=20
        mean that all encoding forms will always represent the same set =
of=20
        characters. Over a million possible codes is far more than =
enough for=20
        the goal of Unicode of encoding characters, not glyphs. Unicode =
is=20
        <I>not</I> designed to encode arbitrary data. If you wanted, for =

        example, to give each =E2=80=9Cinstance of a character on paper =
throughout=20
        history=E2=80=9D its own code, you might need trillions or =
quadrillions of such=20
        codes; noble as this effort might be, you would not use Unicode =
for such=20
        an encoding.&nbsp;<A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dutf16-7></A>Q: Are there any 16-bit =
values that are=20
        invalid?</P>
        <P class=3Da>A: The two values FFFE<SUB>16</SUB> and =
FFFF<SUB>16</SUB> as=20
        well as the 32 values from FDD0<SUB>16</SUB> to =
FDEF<SUB>16</SUB>=20
        represent noncharacters. They are invalid in interchange, but =
may be=20
        freely used internal to an implementation. Unpaired surrogates =
are=20
        invalid as well, i.e. any value in the range D800<SUB>16</SUB> =
to=20
        DBFF<SUB>16</SUB> not followed by a value in the range =
DC00<SUB>16</SUB>=20
        to DFFF<SUB>16</SUB>, or any value in the range =
DC00<SUB>16</SUB> to=20
        DFFF<SUB>16</SUB> not preceded by a value in the range =
D800<SUB>16</SUB>=20
        to DBFF<SUB>16</SUB>. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dutf16-8></A>Q: Are there any paired =
surrogates that=20
        are invalid?</P>
        <P class=3Da>A: Some code points are designated as =
noncharacters. They are=20
        invalid in interchange, but may be freely used internal to an=20
        implementation. For the 32 noncharacters that are supplementary=20
        characters, the corresponding surrogate pairs are listed =
below.</P>
        <DIV align=3Dcenter>
        <CENTER>
        <TABLE class=3Dfaq>
          <TBODY>
          <TR>
            <TH>UTF-16</TH>
            <TH>UTF-8</TH>
            <TH>UCS-4</TH></TR>
          <TR>
            <TD>D83F DFF*</TD>
            <TD>F0 9F BF B*</TD>
            <TD>0001FFF*</TD></TR>
          <TR>
            <TD>D87F DFF*</TD>
            <TD>F0 AF BF B*</TD>
            <TD>0002FFF*</TD></TR>
          <TR>
            <TD>D8BF DFF*</TD>
            <TD>F0 BF BF B*</TD>
            <TD>0003FFF*</TD></TR>
          <TR>
            <TD>D8FF DFF*</TD>
            <TD>F1 8F BF B*</TD>
            <TD>0004FFF*</TD></TR>
          <TR>
            <TD>D93F DFF*</TD>
            <TD>F1 9F BF B*</TD>
            <TD>0005FFF*</TD></TR>
          <TR>
            <TD>D97F DFF*</TD>
            <TD>F1 AF BF B*</TD>
            <TD>0006FFF*</TD></TR>
          <TR>
            <TD colSpan=3D3>
              <P class=3Da align=3Dcenter>...</P></TD></TR>
          <TR>
            <TD>DBBF DFF*</TD>
            <TD>F3 BF BF B*</TD>
            <TD>000FFFF*</TD></TR>
          <TR>
            <TD>DBFF DFF*</TD>
            <TD>F4 8F BF B*</TD>
            <TD>0010FFF*</TD></TR>
          <TR>
            <TD colSpan=3D3>* =3D E or =
F</TD></TR></TBODY></TABLE></CENTER></DIV>
        <P class=3Da>Surrogate pairs that refer to unassigned characters =
should=20
        not occur in data that you generate, but may legitimately occur =
in data=20
        from a system that=E2=80=99s conformant to a later version of =
the Unicode=20
        Standard.</P>
        <P class=3Dq><A name=3Dutf16-9></A>Q: Since the surrogate pairs =
will be=20
        rare, does that mean I can dispense with them?</P>
        <P class=3Da>A: Just because the characters are rare does =
<I>not</I> mean=20
        that they should be neglected. It will become even more =
important to=20
        support surrogate pairs in the future as they become more widely =
used=20
        for minor scripts, mathematics, and rare Han characters. The =
fact that=20
        the characters are rare <I>can</I> be taken into account when =
optimizing=20
        code and storage, however.</P>
        <P class=3Dq><A name=3Dutf16-10></A>Q: When will most =
implementations of=20
        Unicode support surrogates?</P>
        <P class=3Da>A: A growing number of implementations support =
surrogates,=20
        including Windows XP and Microsoft Office. Although Java does =
not yet=20
        support surrogates, there is a set of utilities in <A=20
        href=3D"http://www.icu-project.org/">ICU4J</A> that=20
        provides&nbsp;surrogate support at a low level; Java 1.4 will =
support=20
        line layout for surrogates.</P>
        <H2><A name=3DUTF32></A>UTF-32 FAQ</H2>
        <P class=3Dq><A name=3Dutf32-1></A>Q: What is UTF-32?</P>
        <P class=3Da>A: Any Unicode character can be represented as a =
single=20
        32-bit unit in UTF-32. This single 4 code unit corresponds to =
the=20
        Unicode scalar value, which is the abstract number associated =
with a=20
        Unicode character. UTF-32 is a subset of the encoding mechanism =
called=20
        <I>UCS-4</I> in ISO 10646. For more information, see Section 3.9 =
=E2=80=9C<A=20
        =
href=3D"http://www.unicode.org/versions/Unicode5.2.0/ch03.pdf#G7404">Unic=
ode=20
        Encoding Forms</A>=E2=80=9D of <I>The Unicode Standard.</I> <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dutf32-2></A>Q: Should I use UTF-32 (or =
UCS-4) for=20
        storing Unicode strings in memory?</P>
        <P class=3Da>A: This depends. If you frequently need to access =
APIs that=20
        require string parameters to be in UTF-32, it may be more =
convenient to=20
        work with UTF-32 strings all the time. However, the downside of =
UTF-32=20
        is that it forces you to use 32-bits for each character, when =
only 21=20
        bits are ever needed. The number of significant bits needed for =
the=20
        average character in common texts is much lower, making the =
ratio=20
        effectively that much worse. In many situations that does not =
matter,=20
        and the convenience of having a fixed number of code units per =
character=20
        can be the deciding factor. </P>
        <P class=3Da>Increasing the storage for the same number of =
characters does=20
        have its cost in applications dealing with large volume of text =
data: it=20
        can mean exhausting cache limits sooner; it can result in =
noticeably=20
        increased read/write times or in reaching bandwidth limits; and =
it=20
        requires more space for storage.What a number of implementations =
do is=20
        to represent strings with UTF-16, but individual characters =
values with=20
        UTF-32, for and example of the latter see <A=20
        href=3D"http://www.unicode.org/faq/utf_bom.html#44">below</A>. =
</P>
        <P class=3Da>The chief selling point for Unicode is providing a=20
        representation for all the world=E2=80=99s characters, =
eliminating the need for=20
        juggling multiple character sets and avoiding the associated =
data=20
        corruption problems. These features were enough to swing =
industry to the=20
        side of using Unicode (UTF-16). While a UTF-32 representation =
does make=20
        the programming model somewhat simpler, the increased average =
storage=20
        size has real drawbacks, making a complete transition to UTF-32 =
less=20
        compelling. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dutf32-3></A>Q: How about using UTF-32 =
interfaces in=20
        my APIs?</P>
        <P class=3Da>A: Except in some environments that store text as =
UTF-32 in=20
        memory, most Unicode APIs are using UTF-16. With UTF-16 =
APIs&nbsp; the=20
        low level indexing is at the storage or code unit level, with=20
        higher-level mechanisms for graphemes or words specifying their=20
        boundaries in terms of the code units. This provides efficiency =
at the=20
        low levels, and the required functionality at the high =
levels.</P>
        <P class=3Da>If its ever necessary to locate the <I>n</I><SUP>th =

        </SUP>character, indexing by character can be implemented as a =
high=20
        level operation. However, while converting from such a UTF-16 =
code unit=20
        index to a character index or vice versa is fairly =
straightforward, it=20
        does involve a scan through the 16-bit units up to the index =
point. In a=20
        test run, for example, accessing UTF-16 storage as characters, =
instead=20
        of code units resulted in a 10=C3=97 degradation. While there =
are some=20
        interesting optimizations that can be performed, it will always =
be=20
        slower on average. Therefore locating other boundaries, such as=20
        grapheme, word, line or sentence boundaries proceeds directly =
from the=20
        code unit index, not indirectly via an intermediate character =
code=20
        index.</P>
        <P class=3Dq><A name=3Dutf32-4></A>Q: Doesn=E2=80=99t it cause a =
problem to have=20
        only UTF-16 string APIs, instead of UTF-32 char APIs?</P>
        <P class=3Da>A: Almost all international functions (upper-, =
lower-,=20
        titlecasing, case folding, drawing, measuring, collation,=20
        transliteration, grapheme-, word-, linebreaks, etc.) should take =

        <I>string parameters</I> in the API, <B><I>not</I></B> single=20
        code-points (UTF-32). Single code-point APIs almost always =
produce the=20
        wrong results except for very simple languages, either because =
you need=20
        more context to get the right answer, or because you need to =
generate a=20
        sequence of characters to return the right answer, or both. </P>
        <P class=3Da>For example, any Unicode-compliant collation (See =
<A=20
        href=3D"http://www.unicode..org/reports/tr10/">Unicode Technical =
Standard=20
        #10:<I> Unicode Collation Algogrithm (UCA)</I></A>) must be able =
to=20
        handle sequences of more than one code-point, and treat that =
sequence as=20
        a single entity. Trying to collate by handling single =
code-points at a=20
        time, would get the wrong answer. The same will happen for =
drawing or=20
        measuring text a single code-point at a time; because scripts =
like=20
        Arabic are contextual, the width of <I>x</I> plus the width of =
<I>y</I>=20
        is not equal to the width of <I>xy</I>. Once you get beyond =
basic=20
        typography, the same is true for English as well; because of =
kerning and=20
        ligatures the width of =E2=80=9Cfi=E2=80=9D in the font may be =
different than the width=20
        of =E2=80=9Cf=E2=80=9D plus the width of =E2=80=9Ci". Casing =
operations must return strings, not=20
        single code-points; see <A=20
        =
href=3D"http://www.unicode.org/charts/case/">http://www.unicode.org/chart=
s/case/</A>=20
        . In particular, the title casing operation requires strings as =
input,=20
        not single code-points at a time.</P>
        <P class=3Da>Storing a single code point in a struct or class =
instead of a=20
        string, would exclude support for graphemes, such as =
=E2=80=9Cch=E2=80=9D for Slovak,=20
        where a single code point may not be sufficient, but a character =

        sequence is needed to express what is required. In other words, =
most API=20
        parameters and fields of composite data types should <I>not</I> =
be=20
        defined as a character, but as a string. And if they are =
strings, it=20
        does not matter what the internal representation of the string =
is.</P>
        <P class=3Da>Given that any industrial-strength text and=20
        internationalization support API has to be able to handle =
sequences of=20
        characters, it makes little difference whether the string is =
internally=20
        represented by a sequence of UTF-16 code units, or by a sequence =
of=20
        code-points ( =3D UTF-32 code units). Both UTF-16 and UTF-8 are =
designed=20
        to make working with substrings easy, by the fact that the =
sequence of=20
        code units for a given code point is unique. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dutf32-5></A>Q: Are there exceptions to =
the rule of=20
        exclusively using string parameters in APIs?</P>
        <P class=3Da>A: The main exception are very low-level operations =
such as=20
        getting character properties (e.g. General Category or Canonical =
Class=20
        in the UCD). For those it is handy to have interfaces that =
convert=20
        quickly to and from UTF-16 and UTF-32, and that allow you to =
iterate=20
        through strings returning UTF-32 values (even though the =
internal format=20
        is UTF-16).</P>
        <P class=3Dq><A name=3Dutf32-6></A>Q: How do I convert a UTF-16 =
surrogate=20
        pair such as &lt;D800 DC00&gt; to UTF-32? A one 4-byte sequence =
or as=20
        two 4-byte sequences?</P>
        <P class=3Da>A: The definition of UTF-32 requires that =
supplementary=20
        characters (those using surrogate pairs in UTF-16) be encoded =
with a=20
        single 4-byte sequence.</P>
        <P class=3Dq><A name=3Dutf32-7></A>Q: How do I convert an =
unpaired UTF-16=20
        surrogate to UTF-32? </P>
        <P class=3Da>A: If an <I>unpaired</I> surrogate is encountered =
when=20
        converting ill-formed UTF-16 data, any conformant converter<I> =
must</I>=20
        treat this as an error. By represented such an unpaired =
surrogate on its=20
        own, the resulting UTF-32 data stream would become ill-formed. =
While it=20
        faithfully reflects the nature of the input, Unicode conformance =

        requires that encoding form conversion always results in valid =
data=20
        stream. <A=20
href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <H2><A name=3DBOM></A>Byte Order Mark (BOM) FAQ</H2>
        <P class=3Dq><A name=3Dbom1></A>Q: What is a BOM?</P>
        <P class=3Da>A: A <I>byte order mark </I>(BOM) consists of the =
character=20
        code U+FEFF at the beginning of a data stream, where it can be =
used as a=20
        signature defining the byte order and encoding form, primarily =
of=20
        unmarked plaintext files. Under some higher level protocols, use =
of a=20
        BOM may be mandatory (or prohibited) in the Unicode data stream =
defined=20
        in that protocol. <A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dbom2></A>Q: Where is a BOM useful?</P>
        <P class=3Da>A: A BOM is useful at the beginning of files that =
are typed=20
        as text, but for which it is not known whether they are in big =
or little=20
        endian format=E2=80=94it can also serve as a hint indicating =
that the file is in=20
        Unicode, as opposed to in a legacy encoding and furthermore, it =
act as a=20
        signature for the specific encoding form used. [<A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">AF]</A> </P>
        <P class=3Dq><A name=3Dbom3></A>Q: What does =
=E2=80=98endian=E2=80=99 mean?</P>
        <P class=3Da>A: Data types longer than a byte can be stored in =
computer=20
        memory with the most significant byte (MSB) first or last. The =
former is=20
        called big-endian, the latter little-endian. When data is =
exchanged,=20
        bytes that appear in the "correct" order on the sending system =
may=20
        appear to be out of order on the receiving system. In that =
situation, a=20
        BOM would look like 0xFFFE which is a noncharacter, allowing the =

        receiving system to apply byte reversal before processing the =
data.=20
        UTF-8 is byte oriented and therefore does not have that issue.=20
        Nevertheless, an initial BOM might be useful to identify the =
datastream=20
        as UTF-8. <A =
href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A>=20
        </P>
        <P class=3Dq><A name=3Dbom4></A>Q: When a BOM is used, is it =
only in 16-bit=20
        Unicode text?</P>
        <P class=3Da>A: No, a BOM can be used as a signature no matter =
how the=20
        Unicode text is transformed: UTF-16, UTF-8, UTF-7, etc. The =
exact bytes=20
        comprising the BOM will be whatever the Unicode character FEFF =
is=20
        converted into by that transformation format. In that form, the =
BOM=20
        serves to indicate both that it is a Unicode file, and which of =
the=20
        formats it is in. Examples:</P>
        <DIV align=3Dcenter>
        <CENTER>
        <TABLE class=3Dfaq>
          <TBODY>
          <TR>
            <TH>Bytes</TH>
            <TH>Encoding Form</TH></TR>
          <TR>
            <TD>00 00 FE FF</TD>
            <TD>UTF-32, big-endian</TD></TR>
          <TR>
            <TD>FF FE 00 00</TD>
            <TD>UTF-32, little-endian</TD></TR>
          <TR>
            <TD>FE FF</TD>
            <TD>UTF-16, big-endian</TD></TR>
          <TR>
            <TD>FF FE</TD>
            <TD>UTF-16, little-endian</TD></TR>
          <TR>
            <TD>EF BB BF</TD>
            <TD>UTF-8</TD></TR></TBODY></TABLE></CENTER></DIV>
        <P class=3Da><A name=3Dbom5></A>Q: Can a UTF-8 data stream =
contain the BOM=20
        character (in UTF-8 form)? If yes, then can I still assume the =
remaining=20
        UTF-8 bytes are in big-endian order?</P>
        <P class=3Da>A: Yes, UTF-8 can contain a BOM. However, it makes =
<I>no</I>=20
        difference as to the endianness of the byte stream. UTF-8 always =
has the=20
        same byte order. An initial BOM is <I>only</I> used as a =
signature =E2=80=94 an=20
        indication that an otherwise unmarked text file is in UTF-8. =
Note that=20
        some recipients of UTF-8 encoded data do not expect a BOM. Where =
UTF-8=20
        is used<I> transparently</I> in 8-bit environments, the use of a =
BOM=20
        will interfere with any protocol or file format that expects =
specific=20
        ASCII characters at the beginning, such as the use of "#!" of at =
the=20
        beginning of Unix shell scripts.<I> </I><A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P>
        <P class=3Dq><A name=3Dbom6></A>Q: What should I do with U+FEFF =
in the=20
        middle of a file?</P>
        <P class=3Da>A: In the absence of a protocol supporting its use =
as a BOM=20
        and when not at the beginning of a text stream, U+FEFF should =
normally=20
        not occur. For backwards compatibility it should be treated as =
ZERO=20
        WIDTH NON-BREAKING SPACE (ZWNBSP), and is then part of the =
content of=20
        the file or string. The use of U+2060 WORD JOINER is strongly =
preferred=20
        over ZWNBSP for expressing word joining semantics since it =
cannot be=20
        confused with a BOM. When designing a markup language or data =
protocol,=20
        the use of U+FEFF can be restricted to that of Byte Order Mark. =
In that=20
        case, any FEFF occurring in the middle of a file can be treated =
as an <A=20
        href=3D"http://www.unicode.org/faq/unsup_char.html">unsupported=20
        character</A>.&nbsp;<A=20
        href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A> =
</P>
        <P class=3Dq><A name=3Dbom7></A>Q: I am using a protocol that =
has BOM at the=20
        start of text. How do I represent an initial ZWNBSP?</P>
        <P class=3Da>A: Use U+2060 WORD JOINER instead.&nbsp;</P>
        <P class=3Dq><A name=3Dbom8></A>Q: How do I tag data that does =
not interpret=20
        FEFF as a BOM?</P>
        <P class=3Da>A: Use the tag <TT>UTF-16BE</TT> to indicate =
big-endian=20
        UTF-16 text, and <TT>UTF-16LE</TT> to indicate little-endian =
UTF-16=20
        text. If you do use a BOM, tag the text as simply =
<TT>UTF-16</TT>. <A=20
        href=3D"http://unicode.org/faq/attribution.html#MD">[MD]</A></P>
        <P class=3Dq><A name=3Dbom9></A>Q: Why wouldn=E2=80=99t I always =
use a protocol that=20
        requires a BOM?</P>
        <P class=3Da>A: Where the data is typed, such as a field in a =
database, a=20
        BOM is unnecessary. In particular, if a text data stream is =
marked as=20
        UTF-16BE, UTF-16LE, UTF-32BE or UTF-32LE, a BOM is neither =
necessary nor=20
        <I>permitted</I>. Any FEFF would be interpreted as a ZWNBSP.</P>
        <P class=3Da>Do not tag every string in a database or set of =
fields with a=20
        BOM, since it wastes space and complicates string concatenation. =

        Moreover, it also means two data fields may have precisely the =
same=20
        content, but not be binary-equal (where one is prefaced by a =
BOM).</P>
        <P class=3Dq><A name=3Dbom10></A>Q: How I should deal with =
BOMs?</P>
        <P class=3Da>A: Here are some guidelines to follow: </P>
        <OL>
          <LI>
          <P class=3Da>A particular protocol (e.g. Microsoft conventions =
for .txt=20
          files) may require use of the BOM on certain Unicode data =
streams,=20
          such as files. When you need to conform to such a protocol, =
use a BOM.=20
          </P></LI>
          <LI>
          <P class=3Da>Some protocols allow optional BOMs in the case of =
untagged=20
          text. In those cases,=20
          <UL>
            <LI>
            <P class=3Da>Where a text data stream is known to be plain =
text, but=20
            of unknown encoding, BOM can be used as a signature. If =
there is no=20
            BOM, the encoding could be anything.</P></LI>
            <LI>
            <P class=3Da>Where a text data stream is known to be plain =
Unicode=20
            text (but not which endian), then BOM can be used as a =
signature. If=20
            there is no BOM, the text should be interpreted as=20
            big-endian.</P></LI></UL></LI>
          <LI>
          <P class=3Da>Some byte oriented protocols expect ASCII =
characters at the=20
          beginning of a file. If UTF-8 is used with these protocols, =
use of the=20
          BOM as encoding form signature should be avoided.</P></LI>
          <LI>
          <P class=3Da>Where the precise type of the data stream is =
known (e.g.=20
          Unicode big-endian or Unicode little-endian), the BOM should =
not be=20
          used. In particular, whenever a data stream is declared to be=20
          UTF-16BE, UTF-16LE, UTF-32BE or UTF-32LE a BOM <I>must</I> not =
be=20
          used. (See also <A=20
          href=3D"http://www.unicode.org/faq/basic_q.html#14">Q: What is =
the=20
          difference between UCS-2 and UTF-16?</A>.) <A=20
          =
href=3D"http://unicode.org/faq/attribution.html#AF">[AF]</A></P></LI></OL=
>
        <P class=3Da>&nbsp;</P>
        <HR width=3D"50%">

        <DIV align=3Dcenter>
        <CENTER>
        <TABLE border=3D0 cellSpacing=3D0 cellPadding=3D0>
          <TBODY>
          <TR>
            <TD><A href=3D"http://www.unicode.org/copyright.html"><IMG =
border=3D0=20
              alt=3D"Access to Copyright and terms of use"=20
              src=3D"http://www.unicode.org/img/hb_notice.gif" =
width=3D216=20
              height=3D50></A></TD></TR></TBODY></TABLE>
        <SCRIPT language=3DJavascript type=3Dtext/javascript=20
        =
src=3D"http://www.unicode.org/webscripts/lastModified.js"></SCRIPT>
        =
</CENTER></DIV></BLOCKQUOTE></TD></TR></TBODY></TABLE></BODY></HTML>

------=_NextPart_000_0000_01CBA821.59AE3F90
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.unicode.org/webscripts/logo60s2.gif

R0lGODdhIgAhAPcAAAAAADMAAGYAAJkAAMwAAP8AAAAzADMzAGYzAJkzAMwzAP8zAABmADNmAGZm
AJlmAMxmAP9mAACZADOZAGaZAJmZAMyZAP+ZAADMADPMAGbMAJnMAMzMAP/MAAD/ADP/AGb/AJn/
AMz/AP//AAAAMzMAM2YAM5kAM8wAM/8AMwAzMzMzM2YzM5kzM8wzM/8zMwBmMzNmM2ZmM5lmM8xm
M/9mMwCZMzOZM2aZM5mZM8yZM/+ZMwDMMzPMM2bMM5nMM8zMM//MMwD/MzP/M2b/M5n/M8z/M///
MwAAZjMAZmYAZpkAZswAZv8AZgAzZjMzZmYzZpkzZswzZv8zZgBmZjNmZmZmZplmZsxmZv9mZgCZ
ZjOZZmaZZpmZZsyZZv+ZZgDMZjPMZmbMZpnMZszMZv/MZgD/ZjP/Zmb/Zpn/Zsz/Zv//ZgAAmTMA
mWYAmZkAmcwAmf8AmQAzmTMzmWYzmZkzmcwzmf8zmQBmmTNmmWZmmZlmmcxmmf9mmQCZmTOZmWaZ
mZmZmcyZmf+ZmQDMmTPMmWbMmZnMmczMmf/MmQD/mTP/mWb/mZn/mcz/mf//mQAAzDMAzGYAzJkA
zMwAzP8AzAAzzDMzzGYzzJkzzMwzzP8zzABmzDNmzGZmzJlmzMxmzP9mzACZzDOZzGaZzJmZzMyZ
zP+ZzADMzDPMzGbMzJnMzMzMzP/MzAD/zDP/zGb/zJn/zMz/zP//zAAA/zMA/2YA/5kA/8wA//8A
/wAz/zMz/2Yz/5kz/8wz//8z/wBm/zNm/2Zm/5lm/8xm//9m/wCZ/zOZ/2aZ/5mZ/8yZ//+Z/wDM
/zPM/2bM/5nM/8zM///M/wD//zP//2b//5n//8z//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAAiACEA
QAj/AK8JHCiwlcFWBAceXJiQoKCEgghIJPCw4cCIBBA6FFjx4kSKCVtJ1GjxWkVBKFOSvNYqpcuX
HS+WnElzZkyTH28W/JgRIkeIOUM2NOjzGsiaOz9iKVkxEKtrgZyyYuVU4NSpA50GEqj1KdWnJoFO
1CmS58qwaD2Oneli7MKWPx0GpRnx7EmxEm+KRFrRRUOMS/HqlGmUgN+abXkatlgRq2OwWAdevXYV
LOXIXJ9K3cxVq1XPX6NqBnsTY96GiT/ajav2dEMsZouWnvtXtWy8Ry2WVXx09lqaI2/L/U0Ty+q0
HGkXPMtSeOvcOwdvRM5SefXFNgX2HGqRZ/bCzLsrNA5f0bbu1Ip1SkfKPqvmrVejiobaNTR8rVsz
0xddVbJlz5fJ1x9l8ukn4GeiUTWfglEJFBAAOw==

------=_NextPart_000_0000_01CBA821.59AE3F90
Content-Type: image/gif
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.unicode.org/img/hb_notice.gif

GIF89a=D8=002=00=B3=FF=00=FF=FF=FF111ccc=9C=9C=9C=CE=CE=CE=FF=CE=CE=CE=9C=
=9C=FF=9C=9C=CEcc=CE11=00=00=00=C0=C0=C0=00=00=00=00=00=00=00=00=00=00=00=
=00!=F9=04=01=00=00=0B=00,=00=00=00=00=D8=002=00@=04=FFp=C9I=AB=BD8=EB=CD=
=BB=FF`(=8E=A4F(=03=A0=AE=82B=00=03=0A=
(=8AJ=03-,=D3oL=9C=02=C0)=00=08=B8=8A5=DF=AA=F8#=AE=02=AF=A5=F2=A40=BAb=D5=
=9BJ=B9\=C5=82FUx{T=9DR=D2=B2=0F(=94=85[=BD=94=16n|=C1c)xW=9C=94=F9=F0Bh+=
=18{=85=86=87=88=89=8A=8B=8C=8D=8E=8F=90=91=92=8B=84=93=96K-=02=03=03FrD\=
|fUm=9Em=9FGk~P8e6N_=ACq=04=01)x=80=9B:Q3u:=B5yG=BC=97=97=95=C2=C5=8E=05=C8=
=C9=C6=8D=C8]=05K=CF=CB=D2=C5=C4=D3=D6=85=08	+		=D9=06=00=D9*=05	=DF=06	=
=CF=E1=07=DD=DE]=D9=EC=E3=DF]=DC=08=EE=00=E3=DD=DD*=F3=E4=D7=FDK%=00=03=0A=
=1CH=B0=A0A=83[=AC=AC2=C6IW=17=01N=A484=03=91=96=A1YQfYL=B8=D1=CC=C2=87=01=
=FF=04d=0C=D0Q=C8=C7"=82=12Fih=08b$=96=8B\B=AA=C4=89=C6B,=0B=AB=18=89He=C5=
=A8\m=B2=10=19=13=86JJ=18VD=16=E2=82%=88=8A=162=BC=B4"C=83=87=0E=05N=C9=E8=
:=B3=07*=8D=14\=B9=8E=C1=C9=C2fY=AC=A8=AA=D6=9A=1AF=89=DB=AA=3D=8ET=F3=A7=
=E8=CC=98]@=9F=D4x=EA=82+=16=B31=14=CE=B0I=E5k=97=9FH=F8X=B5=82=95=AA=1F=B4=
=86=F1=FEE=A3p*=DDCs/k=96jv=B3=E7=CF=98/=80=9E=16=0E=80=BA=03=00=F2=B93=A0=
=0E=01=00s=AE=C3=85+=80=00=F5=8A=D3=E0=B4=A93=10M=85=B9h=BF=CD=A1F=F0=0Dw=
=BE=D1=D4D#_=CE=BC=B9=BF=CC=CE=A3K=9F=AE=88=90=96^B =
f=1D@=80=13X=EE[j=11=80=B8)=0A=
y\=9DH6=C1=BA=F5JH=1CY=AF=A6=FD=95X2=DC.l=EE=1C=19=F57nd=A9+=F5=C5=1D=FFy=
=E1y=D4=11'=07=86=A4=C7x%uQ=14w$=A1=C1=A0R=FF=88v=1D=1Ec=ED=E0=C4=18h9=F5=
S*=1E=0E=B5W[S=CD=82C=1D=9C=EC=C1=94=1D5t=F7=02I=00"=F5=1E,|=BD=80=18(\=A5=
=81F*`=B9Q=C3X=A5=C42=86~G=EDAb\=DD=C9=D0]=17=D0!=82=18_=96=19=99ET=D4U=D9=
=CF=00=F1Y=D2$rP=E9=C2=1F[U=D1=10D=8E*Z=D6`!a=FE=07=1A(=CCm	=
=DA=0Dl=D8=E7=D0Nb=8A=C2]T_"=E9=97M=14=FA4%e(`Q=98R_=D4=94$=1A9=90=A8I=1D=
=19N=84=9C=9B=9E=E1=E2=85/=818$ix.b:J=A6=9C=E2=D2=DD=A5=93=AE=F0ix=82l=02=
=1E=A9f=9CZ=A9=14=97~=9A=A9s=90Z)=EB=AC=9E=C5J+2=D94cOo+=F0=1A=8D=AE=E2=F0=
=EAL=AF=FC,=F1=9Bo=E7=04=EB=8C=B0=B4=86fA=FF=B3=8B=94=E6=8D=01=D4=E6&=0E?=
=C7=96v@6=C7=A9P=1A<=F0tq=ECk=C9n=CB=8D6=D3V=0B=AD=B3=15=AC=EB=EE=BB=D7=D8=0A=
=EF=BC=F4=B2{=D0=BD=F8=E6=AB=EF=BE=F8=D6=EB=EF=BF=94=88=86=05=96=D7	=
=03=93=94]=B0=D9Kw0=E2g=15=15F=04=F1WTT8Jg=8BaJh=15=1FG1=15=E5S=119=A2=F0=
!w9=82A=9CK=0C=11=98=0D:i=E8=CA`_=01=83=D5NH=84T=05=C4=82h2=03=0E6=EA=A2=C9=
[=BF=CC2b=0D?=7F\#QDo=82=8A&Tj=A5=15=15=10=F9hJ&:=D8<f=15]=0E=D6B=C8K=90=88=
=82U1=EF5=C8=05(=EBe'^=89=9D=91=03=DA<=BE=8Ct^b=DC	C=CF	=
=97=A1=91=1E=9CD=1D#=82N=D1=F8=B6=D3g=A7=11=E0=0FJJ]2=DB.4:=F1=C7G=E62=B2=0A=
=84=0C=0C=95=0E"q=18hcW=A1=F1=E1=FF~(l]=1F=89=AA=9E8x=99Q=88=F9=A5=CD=A5F=
i=93zCt=12c=E0=A2V=A14=C6=3D=A6=A0=E8=CA-(}=0A=
=D3}=DD=DC=D6I=8D=A7=02=C5=0D,=C9=EB=13=D7md=A9b=E9=C8=03=0C=C9=0F=CB=9D4=
=89=F1=05=B2=EA=E8R=E59=AF=FD2=D4_=06=BD=A8/|=0F=FE=0F=E2=8B=8F=DF=F5=8B=90=
o=FEh=EB/=D7=BD?Yd=95g=D7}	=
=1D~F=96=D6=0F;=F9{=DC=9C=A4=D8=E6=E3=1F=F8=F6=80>!L=E4=07=8F=03=CD=FB=AE=
A=A4=97=B1i'$=D9=D4=0E=FAp=0A=
=11%I$=80h=D0=EA"=B6=B0=9B5F=00W=03C=1F.'1=14=B0=01t=83)`=AD=94=E3=9C=C2T=
=C5=81`bY=F8L=88=A7S=E8)*5=D9=D8=CB=86=C01SeG-=85*=0F=17=CE=D0=98 Bh/	=
=FC=CC=02=A7q=1D6=CC=CFl=1C=E3=CA=D6=00=93=16=C2=B1=C7&OB[=0A=
!=D6=18,=EC=CA=8Cf=A0X=19=1Fh=C6E=A3)=91=85=DB=EB=1F=14h=94F=EA,=B1=8Dpt=1F=
=1A=E3HGZ=BD=B19=F78W=B16s=AE=DE=8Ck\u=84=DC=1C=EBU=9A=DCt=03=1D=F4 =
=87"=BBa=0E~=A8=A3=8F=E2:=17j=CE=E5=9A=15=FC1Y=DCJ=80m=B8=85=00f=C1=EB=8E=
=D1=91=169=0C =
=1Bm=D8=03[=98=D4F#k=D3=0ES=82k=8F=C8=02=CE9=1EI=1Co=8D=B2=90=F5=02=A5sJs=
=AC=03=0C=C7=95=A8D=87*+=89=CBc=FD&\K=D8=8D-MS=C9=E0=94=CB6=FE=D2es=0E=10=
=0F=15P=D36=D4=B4=E43=0A=
=10=8Fl=DA=83Z=D0L&k=B4Y=08R=D6=F26=E3Dg8s9=C8y=E9=F1=9D=F0=8C=A7<=E7I=CF=
z=DA=B3=92=D1lg =F7	=
+~=F9=F3=9F=00=0D=A8@=07J=D0=82=1AT=A0=11=00=00;e/gif</dc:format>=0A=
      </rdf:Description>=0A=
      <rdf:Description rdf:about=3D""=0A=
            xmlns:pdf=3D"http://ns.adobe.com/pdf/1.3/">=0A=
         <pdf:Producer>Adobe PDF library 6.66</pdf:Producer>=0A=
      </rdf:Description>=0A=
      <rdf:Description rdf:about=3D""=0A=
            xmlns:xmpTPg=3D"http://ns.adobe.com/xap/1.0/t/pg/"=0A=
            xmlns:stDim=3D"http://ns.adobe.com/xap/1.0/sType/Dimensions#"=0A=
            xmlns:stFnt=3D"http://ns.adobe.com/xap/1.0/sType/Font#"=0A=
            xmlns:xmpG=3D"http://ns.adobe.com/xap/1.0/g/">=0A=
         <xmpTPg:NPages>1</xmpTPg:NPages>=0A=
         =
<xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>=0A=
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>=0A=
         <xmpTPg:MaxPageSize rdf:parseType=3D"Resource">=0A=
            <stDim:w>612.000000</stDim:w>=0A=
            <stDim:h>792.000000</stDim:h>=0A=
            <stDim:unit>Points</stDim:unit>=0A=
         </xmpTPg:MaxPageSize>=0A=
         <xmpTPg:Fonts>=0A=
            <rdf:Bag>=0A=
               <rdf:li rdf:parseType=3D"Resource">=0A=
                  <stFnt:fontName>Arial-BoldMT</stFnt:fontName>=0A=
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>=0A=
                  <stFnt:fontFace>Bold</stFnt:fontFace>=0A=
                  <stFnt:fontType>Open Type</stFnt:fontType>=0A=
                  <stFnt:versionString>Version 3.00</stFnt:versionString>=0A=
                  <stFnt:composite>False</stFnt:composite>=0A=
                  <stFnt:fontFileName>ARIALBD.TTF</stFnt:fontFileName>=0A=
               </rdf:li>=0A=
            </rdf:Bag>=0A=
         </xmpTPg:Fonts>=0A=
         <xmpTPg:PlateNames>=0A=
            <rdf:Seq>=0A=
               <rdf:li>Cyan</rdf:li>=0A=
               <rdf:li>Magenta</rdf:li>=0A=
               <rdf:li>Yellow</rdf:li>=0A=
               <rdf:li>Black</rdf:li>=0A=
            </rdf:Seq>=0A=
         </xmpTPg:PlateNames>=0A=
         <xmpTPg:SwatchGroups>=0A=
            <rdf:Seq>=0A=
               <rdf:li rdf:parseType=3D"Resource">=0A=
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>=0A=
                  <xmpG:groupType>0</xmpG:groupType>=0A=
                  <xmpG:Colorants>=0A=
                     <rdf:Seq>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>White</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>Black</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>100.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>80% Black</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>80.000001</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>60% Black</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>60.000002</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>40% Black</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>39.999998</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>20% Black</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>19.999999</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>Red M=3D100 =
Y=3D100</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>100.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>100.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>75% Red M=3D75 =
Y=3D75</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>75.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>75.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>50% Red M=3D50 =
Y=3D50</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>50.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>50.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>25% Red M=3D25 =
Y=3D25</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>25.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>25.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>Green C=3D80 =
Y=3D100</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>80.000001</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>100.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>75% Green C=3D60 =
Y=3D75</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>60.000002</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>75.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>50% Green C=3D40 =
Y=3D50</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>39.999998</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>50.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>25% Green C=3D20 =
Y=3D25</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>19.999999</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>25.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>Blue C=3D100 =
M=3D50</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>100.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>50.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>75% Blue C=3D75 =
M=3D37.5</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>75.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>37.500000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>50% Blue C=3D50 =
M=3D25</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>50.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>25.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>25% Blue C=3D25 =
M=3D12.5</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>25.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>12.500000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>Orange M=3D50 =
Y=3D100</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>50.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>100.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>75% Orange M=3D37.5 =
Y=3D75</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>37.500000</xmpG:magenta>=0A=
                           <xmpG:yellow>75.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>50% Orange M=3D25 =
Y=3D50</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>25.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>50.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>25% Orange M=3D12.5 =
Y=3D25</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>12.500000</xmpG:magenta>=0A=
                           <xmpG:yellow>25.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>Violet C=3D50 =
M=3D90</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>50.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>90.000004</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>75% Violet C=3D37.5 =
M=3D67.5</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>37.500000</xmpG:cyan>=0A=
                           <xmpG:magenta>67.500001</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>50% Violet C=3D25 M=3D45 =
</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>25.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>44.999999</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>25% Violet C=3D12.5 =
M=3D22.5</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>12.500000</xmpG:cyan>=0A=
                           <xmpG:magenta>22.500002</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>Azure =
C=3D80</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>80.000001</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>75% Azure =
C=3D60</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>60.000002</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>50% Azure =
C=3D40</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>39.999998</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>25% Azure =
C=3D20</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>19.999999</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>0.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>Yellow</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>100.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>75% Yellow</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>75.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>50% Yellow</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>50.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                        <rdf:li rdf:parseType=3D"Resource">=0A=
                           <xmpG:swatchName>25% Yellow</xmpG:swatchName>=0A=
                           <xmpG:mode>CMYK</xmpG:mode>=0A=
                           <xmpG:type>PROCESS</xmpG:type>=0A=
                           <xmpG:cyan>0.000000</xmpG:cyan>=0A=
                           <xmpG:magenta>0.000000</xmpG:magenta>=0A=
                           <xmpG:yellow>25.000000</xmpG:yellow>=0A=
                           <xmpG:black>0.000000</xmpG:black>=0A=
                        </rdf:li>=0A=
                     </rdf:Seq>=0A=
                  </xmpG:Colorants>=0A=
               </rdf:li>=0A=
            </rdf:Seq>=0A=
         </xmpTPg:SwatchGroups>=0A=
      </rdf:Description>=0A=
      <rdf:Description rdf:about=3D""=0A=
            xmlns:illustrator=3D"http://ns.adobe.com/illustrator/1.0/">=0A=
         <illustrator:Type>Document</illustrator:Type>=0A=
      </rdf:Description>=0A=
      <rdf:Description rdf:about=3D""=0A=
            xmlns:exif=3D"http://ns.adobe.com/exif/1.0/">=0A=
         <exif:PixelXDimension>208</exif:PixelXDimension>=0A=
         <exif:PixelYDimension>45</exif:PixelYDimension>=0A=
      </rdf:Description>=0A=
      <rdf:Description rdf:about=3D""=0A=
            xmlns:tiff=3D"http://ns.adobe.com/tiff/1.0/">=0A=
         <tiff:SamplesPerPixel>3</tiff:SamplesPerPixel>=0A=
         <tiff:ColorSpace>1</tiff:ColorSpace>=0A=
         <tiff:XResolution>72/1</tiff:XResolution>=0A=
         <tiff:YResolution>72/1</tiff:YResolution>=0A=
         <tiff:ResolutionUnit>2</tiff:ResolutionUnit>=0A=
         <tiff:BitsPerSample>=0A=
            <rdf:Seq>=0A=
               <rdf:li>8</rdf:li>=0A=
               <rdf:li>8</rdf:li>=0A=
               <rdf:li>8</rdf:li>=0A=
            </rdf:Seq>=0A=
         </tiff:BitsPerSample>=0A=
      </rdf:Description>=0A=
   </rdf:RDF>=0A=
</x:xmpmeta>=0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                                                                         =
                           =0A=
                           =0A=
<?xpacket =
end=3D"w"?>=01=FF=FE=FD=FC=FB=FA=F9=F8=F7=F6=F5=F4=F3=F2=F1=F0=EF=EE=ED=EC=
=EB=EA=E9=E8=E7=E6=E5=E4=E3=E2=E1=E0=DF=DE=DD=DC=DB=DA=D9=D8=D7=D6=D5=D4=D3=
=D2=D1=D0=CF=CE=CD=CC=CB=CA=C9=C8=C7=C6=C5=C4=C3=C2=C1=C0=BF=BE=BD=BC=BB=BA=
=B9=B8=B7=B6=B5=B4=B3=B2=B1=B0=AF=AE=AD=AC=AB=AA=A9=A8=A7=A6=A5=A4=A3=A2=A1=
=A0=9F=9E=9D=9C=9B=9A=99=98=97=96=95=94=93=92=91=90=8F=8E=8D=8C=8B=8A=89=88=
=87=86=85=84=83=82=81=80=7F~}|{zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQ=
PONMLKJIHGFEDCBA@?>=3D<;:9876543210/.-,+*)('&%$#"! =
=1F=1E=1D=1C=1B=1A=19=18=17=16=15=14=13=12=11=10=0F=0E=0D=0C=0B=0A=
	=
=08=07=06=05=04=03=02=01=00=00!=F9=04=00=00=00=00=00,=00=00=00=00=D0=00-=00=
=00=04=FFp=C8I=AB=BD8=EB=CD=BB=FF`(=8Edi=9Eh=AA=AE,=97=04=82=10 =
=EBK_J`%7=85=E4=81=04=061=93=10=83=93=17rB=ECQr=8A=DBQ=C8,N=96I=AB=0D=93=1B=
m;]o,=A1=88=D5=AC=16X%!p=0E=D8<=A5=05=11=A3=D1e=02=C5;66=D6=D3x=02=03w}=83=
=7F=120TIm=12ln=13a!=8E=1Ej#f=8D=02B?=01z=8D=08/=9A<=8DB<9	=
=A2=03=A6=A7=03=89=013Dy=3Dt=9F=9C=A9=9D=98=7Fp=A9=82=952{=87Ly=BB=9F=8C=BE=
l=B9|=8A=987=8E=9F=9BT=AB=83=AE=8AJ=D4=9Cev=A6=19j=CE=D3FPnt=B7=C1A=BE=03=
1=AE=99=E7:=EB=E7=C9=8C09=BE0=9C2wX=0A=
B=82Q=E7=3D=F9=93=BA=B0UR=F3=8F=11=976=03=F7=9DbDF=17=85I{=10=DC=91'=84=9B=
=8C2z=D8=D4=D3C=A7^=B1<=E6=FF=00=FD:Fc=CC=A5`=CA$`=DB=A3O=90=BB],=DD=D1h&=
=AC#+x=82 =
"=92=C8n=E7=1AF=F7=EA=1C=83=E12"=066z=12.=92=A5=EE=A1A=9A=1C=D5=11d=D8R%B=
F=D8=02=1A=AC=A0F=97#]=9F*=88=13iH=1F;=8Bd\=9A=A3Ie=9E=CB=AE[Y=F1=C8Y=D2=0D=
=C4#+_=C8[=FA=C6U'=A4=88=DE=16=D5I'%D=B6eo*=A6=B0=F6=EA=B2c|=1E)=06=D8F=A7=
=85=93p*=E92=D7=0B=A3=84=C6=12=85=B5Sj=99H*=18=B4v<=A5Qf=90(W|=95d=14=3D=AC=
=DD2=94?=A1=B5)=9CX=8Df=B3Va=05w=B8-'=C3=CA=EA=C2=FE=CCT=C6x=94^=99=00=8F=
=FC=CCn=D2=982:Hgr=92=83Y=DC=DB=EE=B0=EF=A9G=ED=BB;W=AFd$=E2=EB'e=C7=85=82=
x=F3=86=9B=CFW=99=85:=90=92=EC(=FCK`=A34=CD`=86=FF=7F/=A0=E3=9D=3D=D4=D1=13=
LQ=A0=19=82Gv=829h=18Q=FC=A8v=E0-=CD)c=D9/=91=FD2=0EaM=3D=C1Gr$V=E4=D2P=90=
=A0=93"H3%c=D4=15=C6=B5=D8"2=92m=10R0=E3\=80=CA=8D-=F4=C8=82D>r=80F=90=17=
=F0=D8\=8D0=12=95=12=91L6=C9=02=19N=EAh=18*=1B=9CBe=94Xf=A9=E5=96\v=E9=E5=
=97`=8A=E5=04=90@=FA =
=D1=99L=D4X=A6=08g=AE=C9=A5=9Ba=86y=E4=04=C6=C4E=14=1FQ-	=
=DE=15zV0b![n=18=A7=97x=DCR=A7=13=A8=F1=04=94=14N4#E=88h=FA=F9=CA1i=9A9=E6=
#H=C2)=91=A0=83nYX%=EDX=06*6=BCAV'Q:=F0!=A0=8B=8C=F5=94=D0=1Fw=FE=E5"R=AC=
=D6Y=08=AA=E6u=AAeVM=1DJ=01=3D=E9=E8=C0=DB=80=A7=DEDL=14=BA`=F1=99z=F1=B0=
=C4=9F=FF0=0A=
D=95=94q=D1	=03=C7Xp=B5=84=A4=AEN=9A1V=A8v=06=D2Ia=BC=81+c=A9=E8THg =
T$B=12=9E-=E6=83=9AC=AD=D1W=A0p/r=EB=E9=9Fj=E5=17=EE=B2vl=D7=AB=BF=E76U =
0=ED=D8t=93=95=9A4W=ED?q=18T=98=B5yX=89/=A7=FA6=89=D1)=EB=F9=0A=
=A3=1F=C2=AA=E3=8BM=94=85FJ=11+=D1Y=1D=B4T=11AJ=B5=A4=BC=DC=03=1E-=C6\=1B=
j=19oy=D2X=1E=FF=17=D8\B`=A7b=C9=13=05=D5=13u=EB=86V=E8y=B0>=98=AFFI=8E=8C=
=0E=C29;=19=CD(o=84=D2=A8=86q03=97=B0=A28=E3Z(W'=A1=C8'=D0\m=B1=D9T=88m=C4=
=95V2q=8A=DBU=D7m=E3=0C=D2=D9=AD=F7=DE'@v4=DF=80=07.=F8=E0=84=17n=F8=E1=88=
'=AEx=07=054=EE=F8=96=8DWP=00=05=93/=BEx=01=07d=AE=B9=FF=01Yj^=F9=00=06=1C=
Py=E8=9F[=8Ex=E3=00=88^y=E4=92S.=01=EB=AF=97=DE=FA=EB=07pN=01=E9=12=E0>=00=
=EC=B1=9B=1Ex=EA=13=A4~=00=00=93=03`|=ED=C8=0F=1Fz=ED=03=10=A0=B9=E8=15,=7F=
=00=01=03h=0E=C0=ED=D0=83=0E=BD=F0=D3K =
<=F1=BE=EF=0D|=F3=DD=0F?@=EA=00=18=E0=FC=F5=A1_=0F<=F0=05=00@=FD=04=CES=0F=
=BC=F3=06=94=AE;=E9=A1=DB=CFy=FD=D5=BB^=F8=EC6=BE=D4=19=C0=00=EF;=00=ED8=87=
;=E0-O~=15=18=1F=E6=F2=C7<=EC=8DNt=CES=9E=F7j=87@=05=0E=B0n=05=E4=E0=01=CF=
=E7=C1	j=AFx=1E$=C0=F7( =C1=DA=99=D0=82=B9=83=9E=0A=
5G=C2=03=8E=F0=83U=1B=1F=EE=08`=BF=122=AF=81=0A=
D=E0=06aH=BA=17=D2=AF=82=F7=13 =
=FFd8?=1Cfl|=D5=1B=1E=F3Z=C8=C0=ED)p}=06=8C=A0=149g=C4	=
Pd=EEx=D7=C3=9C=14=05=F8=C5=0A=
:Q_=04=B0=9D=04=D28=BF4N =
=7F=BB=B3=9D=1B=E3=A8=BE=0B=B0=F1=8D=B2=CB=9D=F1=D4=D8=BC:=D2=CF=8Fg=0C=A4=
 =07=89=81=E7=19=F2=90=88L=A4"=17=C9=C8F=0A=
=90=90=90=8C=A4$'I=C9J=12.=02=00;
------=_NextPart_000_0000_01CBA821.59AE3F90
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.unicode.org/webscripts/standard_styles.css

BODY {
	BACKGROUND-COLOR: #fffffe; MARGIN: 0px; FONT-FAMILY: Arial, Geneva, =
sans-serif; COLOR: #000000
}
DIV.body {
	MARGIN: 1em
}
P {
	BACKGROUND-COLOR: #fffffe; FONT-FAMILY: Arial, Geneva, sans-serif; =
COLOR: #000000
}
TD {
	BACKGROUND-COLOR: #fffffe; FONT-FAMILY: Arial, Geneva, sans-serif; =
COLOR: #000000
}
LI {
	BACKGROUND-COLOR: #fffffe; MARGIN-TOP: 0.25em; FONT-FAMILY: Arial, =
Geneva, sans-serif; MARGIN-BOTTOM: 0.25em; COLOR: #000000
}
A:link {
	COLOR: #bb0000
}
A:visited {
	COLOR: #880000
}
A:active {
	COLOR: #ff3333
}
A:hover {
	COLOR: #ff3333
}
H1 {
	FONT-WEIGHT: bold
}
H2 {
	FONT-WEIGHT: bold
}
H3 {
	FONT-WEIGHT: bold
}
H4 {
	FONT-WEIGHT: bold
}
H1 {
	TEXT-ALIGN: center; MARGIN-TOP: 12px; FONT-FAMILY: Arial, Geneva, =
sans-serif; FONT-SIZE: 180%
}
H2 {
	LINE-HEIGHT: 100%; MARGIN-TOP: 2em; FONT-FAMILY: Arial, Geneva, =
sans-serif; FONT-SIZE: 120%
}
H3 {
	MARGIN-TOP: 2em; FONT-FAMILY: Arial, Geneva, sans-serif; FONT-SIZE: =
105%
}
H4 {
	MARGIN-TOP: 2em; FONT-FAMILY: Arial, Geneva, sans-serif; FONT-SIZE: 95%
}
TD.bar {
	TEXT-ALIGN: right; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #990000; =
PADDING-LEFT: 4px; PADDING-RIGHT: 4px; FONT-FAMILY: Arial, Geneva, =
sans-serif; COLOR: #fffffe; FONT-SIZE: 100%; FONT-WEIGHT: bold; =
PADDING-TOP: 4px
}
P.bar {
	TEXT-ALIGN: right; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #990000; =
PADDING-LEFT: 4px; PADDING-RIGHT: 4px; FONT-FAMILY: Arial, Geneva, =
sans-serif; COLOR: #fffffe; FONT-SIZE: 100%; FONT-WEIGHT: bold; =
PADDING-TOP: 4px
}
TD.icon {
	TEXT-ALIGN: left; PADDING-BOTTOM: 2px; BACKGROUND-COLOR: #990000; =
PADDING-LEFT: 2px; PADDING-RIGHT: 2px; FONT-FAMILY: Arial, Geneva, =
sans-serif; COLOR: #fffffe; FONT-SIZE: 100%; FONT-WEIGHT: bold; =
PADDING-TOP: 2px
}
TD.gray {
	PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #999999; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; COLOR: #fffffe; FONT-SIZE: 50%; PADDING-TOP: 0px
}
A.bar {
	FONT-SIZE: 100%
}
A.bar:link {
	COLOR: #fffffe; FONT-SIZE: 90%
}
A.bar:visited {
	COLOR: #fffffe; FONT-SIZE: 90%
}
A.bar:active {
	COLOR: #ff3333; FONT-SIZE: 90%
}
A.bar:hover {
	COLOR: #ff3333; FONT-SIZE: 90%
}
TD.navCol {
	PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #f0e0c0; PADDING-LEFT: 4px; =
PADDING-RIGHT: 4px; COLOR: #330000; PADDING-TOP: 4px
}
TABLE.navColTable {
	BACKGROUND-COLOR: #f0e0c0; COLOR: #330000
}
TD.navColTitle {
	TEXT-ALIGN: center; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #990000; =
PADDING-LEFT: 4px; PADDING-RIGHT: 4px; FONT-FAMILY: Arial, Geneva, =
sans-serif; COLOR: #fffffe; FONT-SIZE: 95%; FONT-WEIGHT: bold; =
PADDING-TOP: 4px
}
TD.navColCell {
	BACKGROUND-COLOR: #f0e0c0; FONT-SIZE: 90%
}
TD.currentPage {
	BACKGROUND-COLOR: #f0e0c0; FONT-STYLE: italic; FONT-SIZE: 90%; =
FONT-WEIGHT: bold
}
TD.contents {
=09
}
TABLE.sidebar {
	PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #990000; MARGIN: 4px; =
PADDING-LEFT: 0px; WIDTH: 40%; PADDING-RIGHT: 0px; FLOAT: right; COLOR: =
#000000; PADDING-TOP: 0px
}
TD.sidebarTitle {
	PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #990000; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; FONT-FAMILY: Arial, Geneva, sans-serif; COLOR: =
#fffffe; FONT-SIZE: 95%; FONT-WEIGHT: bold; PADDING-TOP: 0px
}
TD.sidebar {
	PADDING-BOTTOM: 2px; BACKGROUND-COLOR: #f0e0c0; PADDING-LEFT: 2px; =
PADDING-RIGHT: 2px; COLOR: #000000; FONT-SIZE: 90%; PADDING-TOP: 2px
}
P.q {
	FONT-STYLE: italic; FONT-FAMILY: "Century Schoolbook", serif; =
FONT-WEIGHT: bold
}
P.a {
	FONT-FAMILY: "Century Schoolbook", serif; MARGIN-LEFT: 16px; =
MARGIN-RIGHT: 16px
}
P.source {
	TEXT-ALIGN: right; FONT-FAMILY: "Century Schoolbook", serif; FONT-SIZE: =
90%; MARGIN-RIGHT: 16px
}
UNKNOWN {
	COLOR: #ffffee
}
TABLE.light {
	BACKGROUND-COLOR: #ffffee; COLOR: #330000
}
TD.dark {
	BACKGROUND-COLOR: #aa0000; FONT-FAMILY: "Century Schoolbook", serif; =
COLOR: #ffffee; FONT-SIZE: 200%
}
H1 {
	TEXT-ALIGN: center; LINE-HEIGHT: 100%; MARGIN: 2px 0px; FONT-FAMILY: =
Arial, Geneva, sans-serif; FONT-SIZE: 150%
}
H4 {
	BACKGROUND-COLOR: #fffffe; FONT-FAMILY: Arial, Geneva, sans-serif; =
MARGIN-BOTTOM: -15px; COLOR: #000000; FONT-SIZE: 95%; FONT-WEIGHT: bold
}
TD.head {
	PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #999999; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; COLOR: #fffffe; FONT-SIZE: 100%; FONT-WEIGHT: bold; =
PADDING-TOP: 0px
}
UL.one {
	LIST-STYLE-TYPE: none; FONT-SIZE: 90%; TEXT-DECORATION: none
}
UL.two {
	TEXT-ALIGN: left; LIST-STYLE-TYPE: none; FONT-SIZE: 85%; =
TEXT-DECORATION: none
}
SPAN.changedspan {
	BORDER-BOTTOM: 1px dotted; BORDER-LEFT: 1px dotted; BACKGROUND-COLOR: =
#ffff00; BORDER-TOP: 1px dotted; BORDER-RIGHT: 1px dotted
}
SPAN.removedspan {
	BORDER-BOTTOM: 1px dotted; BORDER-LEFT: 1px dotted; BACKGROUND-COLOR: =
#ffff00; BORDER-TOP: 1px dotted; BORDER-RIGHT: 1px dotted; =
TEXT-DECORATION: line-through
}
TABLE.simple {
	BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; =
PADDING-BOTTOM: 0.2em; PADDING-LEFT: 0.2em; PADDING-RIGHT: 0.2em; =
BORDER-COLLAPSE: collapse; FONT-SIZE: 1em; BORDER-TOP: #a0a0a0 1px =
solid; BORDER-RIGHT: #a0a0a0 1px solid; PADDING-TOP: 0.2em
}
TABLE.simple TH {
	BORDER-BOTTOM: #a0a0a0 1px solid; TEXT-ALIGN: left; BORDER-LEFT: =
#a0a0a0 1px solid; PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; BORDER-TOP: #a0a0a0 1px solid; FONT-WEIGHT: bold; =
BORDER-RIGHT: #a0a0a0 1px solid; PADDING-TOP: 5px
}
TABLE.simple TD {
	BORDER-BOTTOM: #a0a0a0 1px solid; TEXT-ALIGN: left; BORDER-LEFT: =
#a0a0a0 1px solid; PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 =
1px solid; PADDING-TOP: 5px
}
TABLE.subtle {
	BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; =
PADDING-BOTTOM: 0.2em; PADDING-LEFT: 0.2em; PADDING-RIGHT: 0.2em; =
BORDER-COLLAPSE: collapse; FONT-SIZE: 1em; BORDER-TOP: #a0a0a0 1px =
solid; BORDER-RIGHT: #a0a0a0 1px solid; PADDING-TOP: 0.2em
}
TABLE.subtle TH {
	BORDER-BOTTOM: #a0a0a0 1px solid; TEXT-ALIGN: left; BORDER-LEFT: =
#a0a0a0 1px solid; PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; BORDER-TOP: #a0a0a0 1px solid; FONT-WEIGHT: bold; =
BORDER-RIGHT: #a0a0a0 1px solid; PADDING-TOP: 5px
}
TABLE.subtle TD {
	BORDER-BOTTOM: #a0a0a0 1px solid; TEXT-ALIGN: left; BORDER-LEFT: =
#a0a0a0 1px solid; PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 =
1px solid; PADDING-TOP: 5px
}
TABLE.subtle-nb {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-COLLAPSE: collapse; =
BORDER-TOP: 0px; BORDER-RIGHT: 0px
}
TABLE.subtle-nb TH {
	BORDER-BOTTOM: #f2f2f2 1px solid; TEXT-ALIGN: left; BORDER-LEFT: =
#f2f2f2 1px solid; PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; BORDER-TOP: #f2f2f2 1px solid; FONT-WEIGHT: bold; =
BORDER-RIGHT: #f2f2f2 1px solid; PADDING-TOP: 5px
}
TABLE.subtle-nb TD {
	BORDER-BOTTOM-STYLE: none; TEXT-ALIGN: left; PADDING-BOTTOM: 5px; =
BORDER-RIGHT-STYLE: none; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; =
BORDER-TOP-STYLE: none; BORDER-LEFT-STYLE: none; FONT-WEIGHT: normal; =
PADDING-TOP: 5px
}
TABLE.subtle-nb TABLE.subtle TH {
	BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; =
BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid
}
TABLE.subtle-nb TABLE.subtle TD {
	BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; =
BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid
}
TABLE.subtle-nb TABLE.simple TH {
	BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; =
BACKGROUND-COLOR: #ffffff; COLOR: #000000; BORDER-TOP: #a0a0a0 1px =
solid; BORDER-RIGHT: #a0a0a0 1px solid
}
TABLE.subtle-nb TABLE.simple TD {
	BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; =
BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid
}
TABLE.subtle TABLE.simple TH {
	BACKGROUND-COLOR: #ffffff; COLOR: #000000
}
TABLE.subtle TH {
	BACKGROUND-COLOR: #fafafa; COLOR: #606060
}
TABLE.subtle-nb TH {
	BACKGROUND-COLOR: #f8f8f8; COLOR: #808080
}
TABLE.subtle TH P {
	BACKGROUND-COLOR: #f8f8f8; COLOR: #808080
}
TABLE.subtle-nb TR TH P {
	BACKGROUND-COLOR: #f8f8f8; COLOR: #808080
}
TABLE.simple TH P {
	MARGIN: 0px
}
TABLE.subtle TH P {
	MARGIN: 0px
}
TABLE.subtle-nb TH P {
	MARGIN: 0px
}
TABLE.simple TD P {
	MARGIN: 0px
}
TABLE.subtle TD P {
	MARGIN: 0px
}
TABLE.subtle-nb TD P {
	MARGIN: 0px
}
TABLE.simple TD UL {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
TABLE.subtle TD UL {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
TABLE.subtle-nb TD UL {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}

------=_NextPart_000_0000_01CBA821.59AE3F90
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://unicode.org/faq/faq_styles.css

TD.navColCell {
	TEXT-INDENT: -1em; PADDING-LEFT: 1.1em
}
LI P {
	MARGIN: 0px
}
UL {
	LIST-STYLE-TYPE: disc
}
UL {
	PADDING-LEFT: 0em; MARGIN-LEFT: 0.25em
}
OL {
	PADDING-LEFT: 0em; MARGIN-LEFT: 0.5em
}
UL UL {
	LIST-STYLE-TYPE: square
}
OL UL {
	LIST-STYLE-TYPE: square
}
UL OL LI {
	LINE-HEIGHT: 110%
}
UL UL LI {
	LINE-HEIGHT: 110%
}
OL UL LI {
	LINE-HEIGHT: 110%
}
OL OL LI {
	LINE-HEIGHT: 110%
}
BLOCKQUOTE UL {
	PADDING-LEFT: 2em
}
BLOCKQUOTE OL {
	PADDING-LEFT: 2em
}
BLOCKQUOTE UL UL {
	PADDING-BOTTOM: 0.15em; PADDING-LEFT: 1em
}
BLOCKQUOTE OL UL {
	PADDING-LEFT: 1em
}
BLOCKQUOTE OL OL {
	PADDING-LEFT: 1em
}
BLOCKQUOTE UL OL {
	PADDING-LEFT: 1em
}
UL LI {
	PADDING-LEFT: 0.15em; MARGIN-LEFT: 0px
}
UL P.a {
	PADDING-LEFT: 0em; MARGIN-LEFT: 0em
}
OL P.a {
	PADDING-LEFT: 0em; MARGIN-LEFT: 0em
}
BLOCKQUOTE TD UL LI {
	LINE-HEIGHT: 125%
}
BLOCKQUOTE TD OL LI {
	LINE-HEIGHT: 125%
}
UL.one {
	LIST-STYLE-TYPE: none; MARGIN-LEFT: 20px; FONT-SIZE: 90%; =
TEXT-DECORATION: none
}
UL.two {
	TEXT-ALIGN: left; LIST-STYLE-TYPE: none; MARGIN-LEFT: 20px; FONT-SIZE: =
85%; TEXT-DECORATION: none
}
SPAN.name {
	TEXT-TRANSFORM: lowercase; FONT-VARIANT: small-caps; FONT-SIZE: 95%
}
H1 {
	MARGIN-TOP: 0.45em; MARGIN-BOTTOM: 0.25em
}
TABLE.faq {
	BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; =
PADDING-BOTTOM: 0.2em; PADDING-LEFT: 0.2em; PADDING-RIGHT: 0.2em; =
BORDER-COLLAPSE: collapse; MARGIN-LEFT: 1em; FONT-SIZE: 1em; BORDER-TOP: =
#a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid; PADDING-TOP: 0.2em
}
TABLE.faq TH {
	BORDER-BOTTOM: #a0a0a0 1px solid; TEXT-ALIGN: left; BORDER-LEFT: =
#a0a0a0 1px solid; PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; BORDER-TOP: #a0a0a0 1px solid; FONT-WEIGHT: bold; =
BORDER-RIGHT: #a0a0a0 1px solid; PADDING-TOP: 5px
}
TABLE.faq TD {
	BORDER-BOTTOM: #a0a0a0 1px solid; TEXT-ALIGN: left; BORDER-LEFT: =
#a0a0a0 1px solid; PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; BORDER-TOP: #a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 =
1px solid; PADDING-TOP: 5px
}
TABLE.faq-nb {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-COLLAPSE: collapse; =
MARGIN-LEFT: 1em; BORDER-TOP: 0px; BORDER-RIGHT: 0px
}
TABLE.faq-nb TH {
	BORDER-BOTTOM: #f2f2f2 1px solid; TEXT-ALIGN: left; BORDER-LEFT: =
#f2f2f2 1px solid; PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; BORDER-TOP: #f2f2f2 1px solid; FONT-WEIGHT: bold; =
BORDER-RIGHT: #f2f2f2 1px solid; PADDING-TOP: 5px
}
TABLE.faq-nb TD {
	BORDER-BOTTOM-STYLE: none; TEXT-ALIGN: left; PADDING-BOTTOM: 5px; =
BORDER-RIGHT-STYLE: none; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; =
BORDER-TOP-STYLE: none; BORDER-LEFT-STYLE: none; FONT-WEIGHT: normal; =
PADDING-TOP: 5px
}
TABLE.faq-nb TABLE.faq TH {
	BORDER-BOTTOM: #a0a0a0 1px solid; BORDER-LEFT: #a0a0a0 1px solid; =
PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BORDER-TOP: =
#a0a0a0 1px solid; BORDER-RIGHT: #a0a0a0 1px solid; PADDING-TOP: 5px
}
TABLE.faq TH {
	BACKGROUND-COLOR: #f8f8f8; COLOR: #808080
}
TABLE.faq-nb TH {
	BACKGROUND-COLOR: #f8f8f8; COLOR: #808080
}
TABLE.faq TH P.a {
	BACKGROUND-COLOR: #f8f8f8; COLOR: #808080
}
TABLE.faq-nb TR TH P.a {
	BACKGROUND-COLOR: #f8f8f8; COLOR: #808080
}
TABLE.faq TH P.a {
	MARGIN: 0px
}
TABLE.faq-nb TH P.a {
	MARGIN: 0px
}
TABLE.faq TD P.a {
	MARGIN: 0px
}
TABLE.faq-nb TD P.a {
	MARGIN: 0px
}
TABLE.faq TD UL {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
TABLE.faq-nb TD UL {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
TABLE.mh TH P.a {
	BORDER-LEFT: #c0c0c0 4px solid; PADDING-BOTTOM: 4px; PADDING-LEFT: =
0.5em; COLOR: #787878; FONT-SIZE: 103%; PADDING-TOP: 4px
}
TABLE.mh TH {
	BORDER-BOTTOM-COLOR: #990000; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; =
PADDING-TOP: 0px
}
TABLE.mh TD P.a {
	FONT-SIZE: 91%
}
TABLE.mh TR TD:first-child {
	PADDING-LEFT: 1em
}
P.q {
	FONT-STYLE: italic; FONT-FAMILY: "Trebuchet MS", Arial, Georgia, =
sans-serif; FONT-WEIGHT: bold
}
P.a {
	FONT-FAMILY: "Trebuchet MS", Arial, Georgia, sans-serif; MARGIN-LEFT: =
16px; MARGIN-RIGHT: 16px
}
H2 {
	FONT-FAMILY: "Trebuchet MS", Arial, Georgia, sans-serif
}
DIV.faq {
	FONT-FAMILY: "Trebuchet MS", Arial, Georgia, sans-serif
}
DIV.faq P {
	FONT-FAMILY: "Trebuchet MS", Arial, Georgia, sans-serif
}
DIV.faq TD {
	FONT-FAMILY: "Trebuchet MS", Arial, Georgia, sans-serif
}
DIV.faq TH {
	FONT-FAMILY: "Trebuchet MS", Arial, Georgia, sans-serif
}
P.a SPAN.name {
	TEXT-TRANSFORM: lowercase; FONT-VARIANT: small-caps; FONT-SIZE: 100%
}
P.q {
	BACKGROUND-COLOR: #fafafa; COLOR: #606060
}
P.q {
	BORDER-BOTTOM: #d9d9d9 1px solid; BORDER-LEFT: #d9d9d9 1px solid; =
BORDER-TOP: #d9d9d9 1px solid; BORDER-RIGHT: #d9d9d9 1px solid
}
P.q {
	PADDING-BOTTOM: 4px; PADDING-TOP: 4px
}
P.q {
	TEXT-INDENT: -1.3em; PADDING-LEFT: 1.55em
}
UL.faq {
	LIST-STYLE-TYPE: none; WIDTH: 29%; FLOAT: right; LIST-STYLE-IMAGE: none
}
UL.faq {
	POSITION: relative; TOP: 1.1em
}
UL.faq {
	BACKGROUND-COLOR: #fffff8
}
UL.faq {
	PADDING-BOTTOM: 0em; MARGIN-TOP: 0px; PADDING-LEFT: 2px; MARGIN-BOTTOM: =
0.75em; MARGIN-LEFT: 2px; PADDING-TOP: 0px
}
UL.faq LI {
	FONT-FAMILY: "Trebuchet MS", Arial, Georgia, sans-serif
}
UL.faq LI {
	LINE-HEIGHT: 108%
}
UL.faq LI {
	BORDER-BOTTOM: #d5d5d5 1px solid; BORDER-LEFT: #d5d5d5 1px solid; =
BORDER-TOP: #d5d5d5 1px solid; BORDER-RIGHT: #d5d5d5 1px solid
}
UL.faq LI {
	BORDER-BOTTOM-COLOR: #909090
}
UL.faq LI {
	BORDER-RIGHT-COLOR: #989898
}
UL.faq LI {
	BORDER-RIGHT-WIDTH: 2px
}
UL.faq LI {
	BORDER-BOTTOM-WIDTH: 2px
}
UL.faq LI {
	BACKGROUND-COLOR: #f0f0f0
}
UL.faq LI {
	PADDING-BOTTOM: 4px; PADDING-LEFT: 0.5em; PADDING-RIGHT: 4px; =
PADDING-TOP: 4px
}
UL.faq LI {
	MARGIN-TOP: 2px; MARGIN-BOTTOM: 5px
}
UL.faq LI {
	BACKGROUND-IMAGE: url(q_icon.jpg); BACKGROUND-REPEAT: no-repeat; =
BACKGROUND-POSITION: 2px 2px
}
UL.faq LI {
	PADDING-LEFT: 1.6em
}
UL.faq LI {
	ZOOM: 1
}
UL.faq A:link {
	COLOR: #660000; TEXT-DECORATION: none
}
UL.faq A:visited {
	COLOR: #660000
}
UL.faq A:hover {
	COLOR: #ff3333
}
UL.faq A:active {
	COLOR: #ff3333
}
UL.faq LI A:link {
	COLOR: #660000; TEXT-DECORATION: none
}
UL.faq LI A:visited {
	COLOR: #660000
}
UL.faq LI A:hover {
	COLOR: #ff3333
}
UL.faq LI A:active {
	COLOR: #ff3333
}
P.a A[href*=3D'attribution'] {
	BACKGROUND-COLOR: inherit; COLOR: #808080; TEXT-DECORATION: none
}
P.a A[href*=3D'attribution'] {
	POSITION: relative; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; FONT-SIZE: =
60%; TOP: -0.18em
}
DIV.faqtoc {
	BACKGROUND-COLOR: #fffffe; PADDING-LEFT: 4px; WIDTH: 29%; FLOAT: right; =
MARGIN-LEFT: 2px
}
DIV.faqtoc UL.faq {
	WIDTH: auto; FLOAT: none
}
DIV.faqtoc UL.faq LI {
	MARGIN-TOP: 0px
}
DIV.faqtoc H2 {
	BACKGROUND-IMAGE: url(point_icon.jpg); BORDER-BOTTOM: medium none; =
POSITION: relative; BORDER-LEFT: #660000 1px solid; PADDING-BOTTOM: 2px; =
PADDING-LEFT: 1.9em; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: =
4px 50%; MARGIN-BOTTOM: 0px; MARGIN-LEFT: 4px; FONT-SIZE: 90%; =
BORDER-TOP: #660000 1px solid; TOP: 1em; FONT-WEIGHT: normal; =
BORDER-RIGHT: #660000 1px solid; PADDING-TOP: 6px
}
DIV.faqtoc H2 A {
	TEXT-DECORATION: none
}
TD.contents BLOCKQUOTE {
	PADDING-RIGHT: 4px; MARGIN-RIGHT: 4px
}
TD.contents BLOCKQUOTE BLOCKQUOTE {
	MARGIN-RIGHT: 3em
}
TABLE.sidebar {
	MARGIN-TOP: 0px; WIDTH: 30%; MARGIN-BOTTOM: 0.5em; MARGIN-LEFT: 15px; =
PADDING-TOP: 0px
}
TD.sidebar {
	PADDING-BOTTOM: 0.25em; PADDING-LEFT: 0.3em; PADDING-RIGHT: 0.15em; =
PADDING-TOP: 0.25em
}
TD.sidebarTitle {
	PADDING-LEFT: 0.2em
}
TABLE.sidenote {
	BORDER-BOTTOM: #c0c0c0 2px solid; BORDER-LEFT: #c0c0c0 1px solid; =
PADDING-BOTTOM: 0.25em; MARGIN: 0px 4px 0.5em 15px; PADDING-LEFT: 0.3em; =
WIDTH: 30%; PADDING-RIGHT: 0.15em; BORDER-COLLAPSE: collapse; FLOAT: =
right; BORDER-TOP: #c0c0c0 1px solid; BORDER-RIGHT: #c0c0c0 2px solid; =
PADDING-TOP: 0.25em
}
TD.sidenoteTitle {
	BORDER-BOTTOM: #808080 1px solid; BACKGROUND-COLOR: #d8d8d8; COLOR: =
#787878
}
TD.sidenote {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; BACKGROUND-COLOR: =
#fefefe; PADDING-LEFT: 0.2em; COLOR: #505050; BORDER-TOP: medium none; =
BORDER-RIGHT: medium none
}
DIV.faqindex {
	PADDING-LEFT: 10px; WIDTH: 46%; PADDING-RIGHT: 10px; MAX-WIDTH: 46%; =
FLOAT: left
}
DIV.faqindex#firstpart {
	PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-RIGHT: #bb0000 1px solid
}
DIV.faqindex {
	BORDER-TOP: #bb0000 1px solid; PADDING-TOP: 0em
}
DIV.faqindex DL {
	MARGIN-TOP: 0em; PADDING-TOP: 0.5em
}
DIV.faqindex DT A {
	PADDING-LEFT: 0.25em
}
DIV.faqindex DT A {
	FONT-WEIGHT: bold; TEXT-DECORATION: none
}
DIV.faqindex DT {
	TEXT-INDENT: -1.25em; MARGIN-LEFT: 1em
}
DIV.faqindex DD {
	PADDING-LEFT: 0.5em; MARGIN-BOTTOM: 0.35em
}
DIV.faqindex DD {
	COLOR: #606060
}
DIV.faqindex DD {
	FONT-SIZE: 95%
}
.fails {
	BACKGROUND-COLOR: #ffcccc
}
.works {
	BACKGROUND-COLOR: #ccffcc
}
.highlight {
	BACKGROUND-COLOR: #ffffcc
}
.fails P.a {
	BACKGROUND-COLOR: #ffcccc
}
.works P.a {
	BACKGROUND-COLOR: #ccffcc
}
.highlight P.a {
	BACKGROUND-COLOR: #ffffcc
}

------=_NextPart_000_0000_01CBA821.59AE3F90
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.unicode.org/webscripts/lastModified.js

  document.writeln("<font size=3D'-3'>Last updated:&nbsp;");
  document.writeln("- " + new =
Date(document.lastModified).toLocaleString());      =20
  document.writeln("</font>");      =20

------=_NextPart_000_0000_01CBA821.59AE3F90--
